{"version":3,"sources":["app/util/regex.js","app/util/validation.js","app/settings/SettingsModal.js","app/header.js","app/footer.js","app/main/batch/batch-body.js","app/main/batch/index.js","app/components/DropdownToggle.js","app/main/action/editable-cell.js","app/popover/value-extractor.popover.js","app/main/action/addon.js","app/components/ConfirmModal.js","app/popover/element-finder.popover.js","app/popover/value.popover.js","app/main/action/action-table.js","app/main/action/index.js","app/popover/start-time.popover.js","app/main/config/config-body.js","app/main/config/index.js","app/util/helper.js","app/main/configs.js","app/components/ToastHandler/index.js","app/components/Error.js","app/components/GoogleAds.js","App.js","serviceWorker.js","index.js"],"names":["REGEX_NUM","REGEX_START_TIME","convertNumberField","data","NUMBER_FIELDS","field","indexOf","Number","SettingsModal","show","handleClose","useForm","mode","reValidateMode","defaultValues","defaultSetting","shouldFocusError","register","handleSubmit","errors","reset","watch","formState","isDirty","isValid","notificationSound","useState","loading","setLoading","error","setError","useEffect","StorageService","getItem","LOCAL_STORAGE_KEY","SETTINGS","then","catch","finally","_","Modal","onHide","size","Header","closeButton","Title","Body","className","Alert","variant","Heading","JSON","stringify","Card","Form","Check","id","name","ref","label","Row","Col","inline","type","value","LOAD_TYPES","WINDOW","DOCUMENT","onSubmit","setItem","md","sm","InputGroup","Prepend","Text","FormControl","placeholder","aria-label","aria-describedby","pattern","isInvalid","retry","Control","Feedback","validate","isNaN","retryInterval","xs","RETRY_OPTIONS","STOP","SKIP","RELOAD","Button","disabled","showSettings","setShowSettings","scroll","setScroll","handleScroll","window","pageYOffset","addEventListener","removeEventListener","Navbar","expand","sticky","Brand","match","src","width","height","alt","Toggle","aria-controls","Collapse","Nav","Link","href","target","onClick","Footer","version","active","BatchBody","batch","configIndex","setConfigs","configs","map","config","index","repeat","repeatInterval","React","memo","as","rel","checked","refresh","onChange","e","ElementUtil","getNameValue","currentTarget","DropdownToggle","forwardRef","children","data-toggle","preventDefault","displayName","EditableCell","initialValue","row","column","required","dataType","updateAction","setValue","invalid","setInvalid","input","useRef","current","classList","remove","test","onBlur","ValueExtractorPopover","OverlayTrigger","trigger","placement","rootClose","overlay","Popover","Content","AddonModal","defaultAddon","setShow","actionIndex","useImperativeHandle","showAddon","addon","actions","element","custom","condition","Object","entries","ADDON_CONDITIONS","key","valueExtractor","ConfirmModel","props","confirm","confirmProps","centered","backdrop","keyboard","title","message","confirmFunc","ElementFinderPopover","Table","bordered","striped","ValuePopover","ActionTable","hiddenColumns","addonRef","toastRef","setData","confirmRef","didMountRef","didUpdateRef","addAction","defaultAction","focus","defaultColumn","Cell","columns","useMemo","style","accessor","initialState","removeAction","rowIndex","filter","_action","_validateActions","forEach","action","document","querySelector","elementFinder","add","tableInstance","useTable","columnId","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setHiddenColumns","_arrayMove","arr","oldIndex","newIndex","length","k","push","undefined","splice","body","header","hover","borderless","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","getRowProps","align","rowId","getAttribute","moveUp","moveDown","cells","cell","getCellProps","original","bind","removeActionConfirm","defaultHiddenColumns","LocalStorage","actionTableRef","onColumnChange","_column","_index","Dropdown","alignRight","Menu","Item","data-column","StartTimePopover","ConfigBody","url","initWait","startTime","importFiled","createRef","enable","ExportService","export","bodyClass","click","accept","files","fr","FileReader","onload","_config","parse","result","_name","ImportService","import","CONFIGS","delay","onClose","location","reload","readAsText","item","htmlFor","fontSize","fontWeight","getConfigName","split","Configs","defaultConfig","selected","setSelected","_configs","checkQueryParams","object","selectedConfigIndex","search","params","replace","decodeURIComponent","findIndex","XPathIndex","removeConfig","Group","controlId","getValue","data-type","Divider","ConfirmModal","ToastHandler","list","setList","toast","headerClass","autohide","Toast","Error","GoogleAds","client","slot","format","adsbygoogle","display","data-ad-client","data-ad-slot","data-ad-format","data-full-width-responsive","App","manifest","setManifest","ManifestService","values","Container","console","Boolean","hostname","react_env","process","ReactDOM","getElementById","$","keydown","keyCode","ctrlKey","shiftKey","on","onerror","GAService","stack","args","apply","navigator","serviceWorker","ready","registration","unregister"],"mappings":"meAAaA,EAAY,QACZC,EAAmB,4BCDnBC,EAAqB,SAACC,EAAMC,GACvC,IAAK,IAAMC,KAASF,GACoB,IAAlCC,EAAcE,QAAQD,KAA+C,IAA9BF,EAAKE,GAAOC,QAAQ,OAC7DH,EAAKE,GAASE,OAAOJ,EAAKE,MCS1BD,EAAgB,CAAC,QAAS,iBA4HjBI,EA1HO,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAAkB,EAC2CC,YAAQ,CAChGC,KAAM,SACNC,eAAgB,WAChBC,cAAeC,IACfC,kBAAkB,IAJZC,EADuC,EACvCA,SAAUC,EAD6B,EAC7BA,aAAcC,EADe,EACfA,OAAQC,EADO,EACPA,MAAOC,EADA,EACAA,MADA,IACOC,UAAaC,EADpB,EACoBA,QAASC,EAD7B,EAC6BA,QAMtEC,EAAoBJ,EAAM,uBAPe,EASjBK,oBAAS,GATQ,mBASxCC,EATwC,KAS/BC,EAT+B,OAUrBF,qBAVqB,mBAUxCG,EAVwC,KAUjCC,EAViC,KAY/CC,qBAAU,WACRC,IAAeC,QAAQC,IAAkBC,SAAUpB,KAAgBqB,KAAKhB,GAAOiB,MAAMP,GAAUQ,SAAQ,SAAAC,GAAC,OAAIX,GAAW,QACtH,CAACR,IASJ,OAAO,kBAACoB,EAAA,EAAD,CAAO/B,KAAMA,EAAMgC,OAAQ/B,EAAagC,KAAK,MAClD,kBAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACvB,kBAACJ,EAAA,EAAMK,MAAP,kBAEF,kBAACL,EAAA,EAAMM,KAAP,KACGnB,EAAU,kBAAC,UAAD,CAASoB,UAAU,sCAC1BlB,EAAQ,kBAACmB,EAAA,EAAD,CAAOC,QAAQ,UAAS,kBAACD,EAAA,EAAME,QAAP,cAAqCC,KAAKC,UAAUvB,IAAkB,oCACtG,kBAACwB,EAAA,EAAD,CAAMN,UAAU,QACd,kBAACM,EAAA,EAAKP,KAAN,KACE,kBAACQ,EAAA,EAAKC,MAAN,CAAYC,GAAG,eAAeC,KAAK,eAAeC,IAAKzC,EAAU0C,MAAM,kBACvE,2BAAOZ,UAAU,cAAjB,mEAGJ,kBAACM,EAAA,EAAD,CAAMN,UAAU,QACd,kBAACM,EAAA,EAAKV,OAAN,0BACA,kBAACU,EAAA,EAAKP,KAAN,KACE,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACP,EAAA,EAAKC,MAAN,CAAYC,GAAG,wBAAwBC,KAAK,wBAAwBC,IAAKzC,EAAU0C,MAAO,oCAAS,0BAAMZ,UAAU,eAAhB,SAAT,cAC1F,kBAACO,EAAA,EAAKC,MAAN,CAAYC,GAAG,yBAAyBC,KAAK,yBAAyBC,IAAKzC,EAAU0C,MAAO,oCAAS,0BAAMZ,UAAU,gBAAhB,UAAT,iBAC5F,kBAACO,EAAA,EAAKC,MAAN,CAAYC,GAAG,wBAAwBC,KAAK,wBAAwBC,IAAKzC,EAAU0C,MAAO,oCAAS,0BAAMZ,UAAU,gBAAhB,SAAT,iBAC1F,kBAACO,EAAA,EAAKC,MAAN,CAAYC,GAAG,yBAAyBC,KAAK,yBAAyBC,IAAKzC,EAAU0C,MAAO,oCAAS,0BAAMZ,UAAU,gBAAhB,UAAT,kBAE9F,kBAACc,EAAA,EAAD,CAAKd,UAAU,6BACb,kBAACO,EAAA,EAAKC,MAAN,CAAYC,GAAG,sBAAsBC,KAAK,sBAAsBC,IAAKzC,EAAU0C,MAAO,oDAA0BlC,EAAoB,kBAAC,IAAD,MAAc,kBAAC,IAAD,MAA5D,WAK9F,kBAAC4B,EAAA,EAAD,CAAMN,UAAU,QACd,kBAACM,EAAA,EAAKP,KAAN,uBACmB,kBAACQ,EAAA,EAAKC,MAAN,CAAYO,QAAM,EAACC,KAAK,QAAQN,KAAK,WAAWD,GAAG,iBAAiBQ,MAAOC,IAAWC,OAAQR,IAAKzC,EAAU0C,MAAM,WACpI,kBAACL,EAAA,EAAKC,MAAN,CAAYO,QAAM,EAACC,KAAK,QAAQN,KAAK,WAAWD,GAAG,mBAAmBQ,MAAOC,IAAWE,SAAUT,IAAKzC,EAAU0C,MAAM,aACvH,+BACE,wBAAIZ,UAAU,aACZ,4BAAI,0BAAMA,UAAU,gBAAhB,UAAJ,qEACA,4BAAI,0BAAMA,UAAU,gBAAhB,YAAJ,sFAKR,kBAACM,EAAA,EAAD,CAAMN,UAAU,QACd,kBAACM,EAAA,EAAKP,KAAN,KACE,kBAACQ,EAAA,EAAD,CAAMc,SAAUlD,GAlDX,SAAAf,GACfD,EAAmBC,EAAMC,GACzB4B,IAAeqC,QAAQnC,IAAkBC,SAAUhC,GAAMiC,MAAK,SAAAG,GAC5DnB,EAAMjB,MACLkC,MAAMP,GAAUQ,SAAQ,SAAAC,GAAC,OAAIX,GAAW,UA+C/B,kBAACgC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKS,GAAI,EAAGC,GAAI,GAAIxB,UAAU,gBAC5B,kBAACyB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBlB,GAAG,SAApB,UAEF,kBAACmB,EAAA,EAAD,CACEC,YAAY,IAAIC,aAAW,IAAIrB,GAAG,QAAQC,KAAK,QAAQqB,mBAAiB,QACxEpB,IAAKzC,EAAS,CAAE8D,QAAS/E,IACzBgF,UAAW7D,EAAO8D,QAEpB,kBAAC3B,EAAA,EAAK4B,QAAQC,SAAd,CAAuBpB,KAAK,WAAW5C,EAAO8D,OAAS,oCAG3D,kBAACpB,EAAA,EAAD,CAAKS,GAAI,EAAGC,GAAI,IACd,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBlB,GAAG,kBAApB,qBAAyD,2BAAOT,UAAU,aAAjB,WAE3D,kBAAC4B,EAAA,EAAD,CACEC,YAAY,IAAIC,aAAW,IAAIrB,GAAG,gBAAgBC,KAAK,gBAAgBqB,mBAAiB,iBACxFpB,IAAKzC,EAAS,CAAEmE,SAAU,SAAApB,GAAK,OAAKqB,MAAMrB,MAC1CgB,UAAW7D,EAAOmE,gBAEpB,kBAAChC,EAAA,EAAK4B,QAAQC,SAAd,CAAuBpB,KAAK,WAAW5C,EAAOmE,eAAiB,oCAGnE,kBAACzB,EAAA,EAAD,CAAK0B,GAAI,IACP,wBAAIxC,UAAU,yCAAwC,6HAExD,kBAACc,EAAA,EAAD,CAAKS,GAAI,EAAGC,GAAI,IACd,kBAACjB,EAAA,EAAKC,MAAN,CAAYQ,KAAK,QAAQN,KAAK,cAAcD,GAAG,kBAAkBQ,MAAOwB,IAAcC,KAAM/B,IAAKzC,EAAU0C,MAAM,UAEnH,kBAACE,EAAA,EAAD,CAAKS,GAAI,EAAGC,GAAI,IACd,kBAACjB,EAAA,EAAKC,MAAN,CAAYQ,KAAK,QAAQN,KAAK,cAAcD,GAAG,kBAAkBQ,MAAOwB,IAAcE,KAAMhC,IAAKzC,EAAU0C,MAAM,oBAEnH,kBAACE,EAAA,EAAD,CAAKS,GAAI,EAAGC,GAAI,IACd,kBAACjB,EAAA,EAAKC,MAAN,CAAYQ,KAAK,QAAQN,KAAK,cAAcD,GAAG,oBAAoBQ,MAAOwB,IAAcG,OAAQjC,IAAKzC,EAAU0C,MAAM,oBAGxHpC,GAAW,yBAAKwB,UAAU,mCACzB,kBAAC6C,EAAA,EAAD,CAAQ7B,KAAK,SAAS8B,UAAWrE,GAAjC,gBClEHmB,EAlDA,SAAC,GAAc,IAAZc,EAAW,EAAXA,KAAW,EACa/B,oBAAS,GADtB,mBACpBoE,EADoB,KACNC,EADM,OAECrE,oBAAS,GAFV,mBAEpBsE,EAFoB,KAEZC,EAFY,KAI3BlE,qBAAU,WACR,IAAMmE,EAAe,WACnBD,EAAiC,IAAvBE,OAAOC,cAInB,OADAD,OAAOE,iBAAiB,SAAUH,GAC3B,WACLC,OAAOG,oBAAoB,SAAUJ,MAEtC,IAEH,IAIMnD,EAAS,UAAMiD,EAAS,SAAW,IACzC,OAAO,kBAACO,EAAA,EAAD,CAAQC,OAAO,KAAKvD,QAAQ,QAAQwD,OAAO,MAAM1D,UAAWA,GACjE,kBAACwD,EAAA,EAAOG,MAAR,CAAc3D,UAAS,UAAKU,EAAKkD,MAAM,QAAU,MAAQlD,EAAKkD,MAAM,SAAW,OAAS,KACtF,yBACEC,IAAI,eACJC,MAAM,KACNC,OAAO,KACP/D,UAAU,gCACVgE,IAAI,8BAELtD,GAEH,kBAAC8C,EAAA,EAAOS,OAAR,CAAeC,gBAAc,qBAC7B,kBAACV,EAAA,EAAOW,SAAR,CAAiB1D,GAAG,oBAClB,kBAAC2D,EAAA,EAAD,CAAKpE,UAAU,YAEf,kBAACO,EAAA,EAAD,CAAMQ,QAAM,GACV,kBAACqD,EAAA,EAAD,CAAKpE,UAAU,QACb,kBAACoE,EAAA,EAAIC,KAAL,CAAUC,KAAK,kDAAkDC,OAAO,UAAxE,gBACA,kBAACH,EAAA,EAAIC,KAAL,CAAUC,KAAK,kCAAkCC,OAAO,UAAxD,QACA,kBAACH,EAAA,EAAIC,KAAL,CAAUC,KAAK,yDAAyDC,OAAO,UAA/E,aAEF,kBAAC,IAAD,CAAUT,MAAM,KAAKC,OAAO,KAAKS,QAAS,kBAAMxB,GAAgB,MAChE,kBAAC,EAAD,CAAetF,KAAMqF,EAAcpF,YA3BrB,WAClBqF,GAAgB,UCLLyB,EAbA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChB,OAAO,kBAAClB,EAAA,EAAD,CAAQC,OAAO,KAAKC,OAAO,UAChC,kBAACU,EAAA,EAAD,CAAKpE,UAAU,WACb,kBAACoE,EAAA,EAAIC,KAAL,CAAUC,KAAK,kCAAkCK,QAAM,GAAvD,4BACA,kBAACP,EAAA,EAAIC,KAAL,CAAUC,KAAK,gEAAgEC,OAAO,UAAtF,UACA,kBAACH,EAAA,EAAIC,KAAL,CAAUC,KAAK,kCAAkCC,OAAO,UAAxD,QACA,kBAACH,EAAA,EAAIC,KAAL,SAAYK,M,uBCHZrH,G,MAAgB,CAAC,SAAU,mBA2ElBuH,EA1EG,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WAAiB,EAC2BnH,YAAQ,CACzFC,KAAM,SACNC,eAAgB,WAChBC,cAAe8G,EACf5G,kBAAkB,IAJZC,EADgD,EAChDA,SAAUC,EADsC,EACtCA,aAAcC,EADwB,EACxBA,OAAQC,EADgB,EAChBA,MADgB,IACTE,UAAaC,EADJ,EACIA,QAASC,EADb,EACaA,QAOrEO,qBAAU,WACRX,EAAMwG,KACL,CAACA,EAAOxG,IAcX,OAAO,kBAACkC,EAAA,EAAD,CAAMc,SAAUlD,GAZN,SAAAf,GACfD,EAAmBC,EAAMC,GACzBgB,EAAMjB,GACN2H,GAAW,SAAAC,GAAO,OAAIA,EAAQC,KAAI,SAACC,EAAQC,GACzC,OAAIA,IAAUL,GACZI,EAAOL,MAAP,2BAAoBK,EAAOL,OAAUzH,GAC9B8H,GAEFA,YAKT,kBAAC5E,EAAA,EAAKP,KAAN,KACE,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKS,GAAG,IAAIC,GAAG,MACb,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBlB,GAAG,gBAApB,WAEF,kBAACmB,EAAA,EAAD,CACElB,KAAK,SACLC,IAAKzC,EAAS,CAAE8D,QAAS/E,IACzBgF,YAAa7D,EAAOgH,OACpBvD,YAAY,IACZC,aAAW,IACXC,mBAAiB,iBAEnB,kBAACxB,EAAA,EAAK4B,QAAQC,SAAd,CAAuBpB,KAAK,WAAW5C,EAAOgH,QAAU,oCAG5D,kBAACtE,EAAA,EAAD,CAAKS,GAAG,IAAIC,GAAG,MACb,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBlB,GAAG,yBAApB,iBAA4D,2BAAOT,UAAU,aAAjB,WAE9D,kBAAC4B,EAAA,EAAD,CACElB,KAAK,iBACLC,IAAKzC,EAAS,CAAEmE,SAAU,SAAApB,GAAK,OAAKqB,MAAMrB,MAC1CgB,YAAa7D,EAAOiH,eACpBxD,YAAY,IACZC,aAAW,IACXC,mBAAiB,0BAEnB,kBAACxB,EAAA,EAAK4B,QAAQC,SAAd,CAAuBpB,KAAK,WAAW5C,EAAOiH,gBAAkB,qCAIrE7G,GAAW,yBAAKwB,UAAU,mCACzB,kBAAC6C,EAAA,EAAD,CAAQ7B,KAAK,SAAS8B,UAAWrE,GAAjC,YCnBO6G,MAAMC,MA3CP,SAAC,GAAwC,IAAtCV,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WAYnC,OAAO,kBAACzE,EAAA,EAAD,CAAMN,UAAU,QACrB,kBAACM,EAAA,EAAKV,OAAN,CAAa4F,GAAG,MACd,kBAAC3E,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,uBAAGyD,OAAO,SAASkB,IAAI,sBAAsBnB,KAAK,yCAAlD,UAEF,kBAACxD,EAAA,EAAD,CAAKS,GAAG,QACN,kBAAChB,EAAA,EAAKC,MAAN,CACEQ,KAAK,SACLP,GAAG,gBACHG,MAAM,UACNF,KAAK,UACLgF,QAASb,EAAMc,QACfC,SAxBO,SAACC,GAAO,IAAD,EACEC,IAAYC,aAAaF,EAAEG,eAA3CtF,EADc,EACdA,KAAMO,EADQ,EACRA,MACd8D,GAAW,SAAAC,GAAO,OAAIA,EAAQC,KAAI,SAACC,EAAQC,GACzC,OAAIA,IAAUL,GACZI,EAAOL,MAAP,2BAAoBK,EAAOL,OAA3B,kBAAmCnE,EAAOO,IACnCiE,GAEFA,eAsBPL,EAAMc,SAAW,kBAAC,EAAD,CAAWd,MAAOA,EAAOC,YAAaA,EAAaC,WAAYA,Q,iBCjCzEkB,EAAiBX,IAAMY,YAAW,WAAwBvF,GAAS,IAA9BwF,EAA6B,EAA7BA,SAAU3B,EAAmB,EAAnBA,QAM1D,OAAO,4BAAQxD,KAAK,SAAShB,UAAU,UAAUoG,cAAY,WAAWzF,IAAKA,EAAK6D,QALpD,SAACqB,GAC7BA,EAAEQ,iBACF7B,EAAQqB,KAGyGM,MAErHF,EAAeK,YAAc,0B,2DCPhBC,EAAe,SAAC,GAAwH,IAA/GC,EAA8G,EAArHvF,MAAqB7D,EAAgG,EAAhGA,KAAa+H,EAAmF,EAA1FsB,IAAOtB,MAAmF,IAA1EuB,OAAUjG,EAAgE,EAAhEA,GAAIkG,EAA4D,EAA5DA,SAAU3E,EAAkD,EAAlDA,QAASK,EAAyC,EAAzCA,SAAUuE,EAA+B,EAA/BA,SAAYC,EAAmB,EAAnBA,aAAmB,EAGxHvB,IAAM3G,SAAS6H,GAHyG,mBAG3IvF,EAH2I,KAGpI6F,EAHoI,OAIpHxB,IAAM3G,SAASvB,EAAK+H,GAAOrG,QAAU2B,GAJ+E,mBAI3IsG,EAJ2I,KAIlIC,EAJkI,KAK5IC,EAAQC,mBA6Bd,OAJA5B,IAAMtG,WAAU,WACd8H,EAASN,KACR,CAACA,IAEG,kBAACjG,EAAA,EAAK4B,QAAN,CAAcxB,IAAKsG,EAAOhG,MAAOA,EAAOP,KAAMD,EAAImF,SA5BxC,SAACC,GAChBoB,EAAME,QAAQC,UAAUC,OAAO,YAC/BL,GAAW,GAFW,IAGd/F,EAAU4E,EAAEG,cAAZ/E,MACJA,GACEe,IAAYA,EAAQsF,KAAKrG,IAC3B+F,GAAW,GAET3E,IAAaA,EAASpB,IACxB+F,GAAW,IAEJL,GACTK,GAAW,GAEbF,EAAS7F,IAckEsG,OAV9D,SAAC1B,GAAO,IACb5E,EAAU4E,EAAEG,cAAZ/E,MACR4F,EAAa1B,EAAO1E,EAAiB,WAAbmG,IAAiD,IAAxB3F,EAAM1D,QAAQ,KAAcC,OAAOyD,GAASA,IAQFgB,UAAW8E,K,0BCnC7FS,EAAwB,kBAAM,kBAACC,EAAA,EAAD,CAAgBC,QAAQ,QAAQC,UAAU,QAAQC,WAAS,EAACC,QAAS,kBAACC,EAAA,EAAD,CAASrH,GAAG,iBAC1H,kBAACqH,EAAA,EAAQhI,MAAT,iBACA,kBAACgI,EAAA,EAAQC,QAAT,KACE,4BACE,4BAAI,2CAAJ,0BAA+C,0BAAM/H,UAAU,gBAAhB,UAA/C,SACA,4BAAI,sCAAJ,oBAAqC,0BAAMA,UAAU,gBAAhB,OAArC,YACA,0DAGM,kBAAC,IAAD,CAAYA,UAAU,qBCH5B3C,EAAgB,CAAC,QAAS,iBAE1B2K,GAAa9B,sBAAW,WAA8BvF,GAAS,IAApCmE,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,WAAsB,EACQnH,YAAQ,CAChFC,KAAM,SACNC,eAAgB,WAChBC,cAAc,eAAMkK,KACpBhK,kBAAkB,IAJZC,EAD0D,EAC1DA,SAAUC,EADgD,EAChDA,aAAcC,EADkC,EAClCA,OAAQC,EAD0B,EAC1BA,MAAoBG,EADM,EACnBD,UAAaC,QADM,EAO1CG,oBAAS,GAPiC,mBAO3DjB,EAP2D,KAOrDwK,EAPqD,KAQ5DC,EAAcjB,kBAAQ,GAe5BkB,8BAAoBzH,GAAK,iBAAO,CAC9B0H,UAD8B,SACnBlD,EAAOmD,GAChBH,EAAYhB,QAAUhC,EACtB9G,EAAM,eAAKiK,IACXJ,GAAQ,QAMZ,OAAO,kBAACzI,EAAA,EAAD,CAAO/B,KAAMA,EAAMiC,KAAK,KAAKD,OAFhB,WAAQwI,GAAQ,KAGlC,kBAAC3H,EAAA,EAAD,CAAMc,SAAUlD,GAxBD,SAAAf,GACfD,EAAmBC,EAAMC,GACzBgB,EAAMjB,GACN2H,GAAW,SAAAC,GAAO,OAAIA,EAAQC,KAAI,SAACC,EAAQC,GACzC,OAAIA,IAAUL,GACZI,EAAOqD,QAAQJ,EAAYhB,SAASmB,MAApC,eAAiDlL,GAC1C,eAAK8H,IAEPA,QAETgD,GAAQ,OAeN,kBAACzI,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACvB,kBAACJ,EAAA,EAAMK,MAAP,eAEF,kBAACL,EAAA,EAAMM,KAAP,KACE,kBAACE,EAAA,EAAD,CAAOC,QAAQ,QAAf,yDACA,kBAACI,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKP,KAAN,KACE,kBAACc,EAAA,EAAD,CAAKb,UAAU,QACb,kBAACc,EAAA,EAAD,KACE,kBAACW,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBlB,GAAG,iBAApB,kBAAmD,2BAAOT,UAAU,eAAjB,OAErD,kBAACO,EAAA,EAAK4B,QAAN,CAAcnB,KAAK,OAAOa,YAAY,iBAAiBC,aAAW,iBAAiBC,mBAAiB,gBAAgBrB,KAAK,gBAAgBC,IAAKzC,EAAS,CAAEyI,UAAU,IAAS1E,YAAa7D,EAAOoK,UAChM,kBAACjI,EAAA,EAAK4B,QAAQC,SAAd,CAAuBpB,KAAK,WAAW5C,EAAOoK,SAAW,yBAG7D,kBAAC1H,EAAA,EAAD,KACE,kBAACW,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBlB,GAAG,mBAApB,aAAgD,2BAAOT,UAAU,eAAjB,OAElD,kBAACO,EAAA,EAAK4B,QAAN,CAAcqD,GAAG,SAASzD,mBAAiB,kBAAkB0G,QAAM,EAAC9H,IAAKzC,EAAS,CAAEyI,UAAU,IAAS1E,YAAa7D,EAAOsK,UAAWhI,KAAK,aACxIiI,OAAOC,QAAQC,KAAkB5D,KAAI,SAACyD,EAAWvD,GAAZ,OAAsB,4BAAQ2D,IAAK3D,EAAOlE,MAAOyH,EAAU,IAAKA,EAAU,QAElH,kBAACnI,EAAA,EAAK4B,QAAQC,SAAd,CAAuBpB,KAAK,WAAW5C,EAAOsK,WAAa,4BAIjE,kBAAC7H,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACW,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBlB,GAAG,eAApB,SAAwC,2BAAOT,UAAU,eAAjB,OAE1C,kBAACO,EAAA,EAAK4B,QAAN,CAAcnB,KAAK,OAAOa,YAAY,QAAQC,aAAW,QAAQC,mBAAiB,cAAcpB,IAAKzC,EAAS,CAAEyI,UAAU,IAAS1E,YAAa7D,EAAO6C,MAAOP,KAAK,UACnK,kBAACH,EAAA,EAAK4B,QAAQC,SAAd,CAAuBpB,KAAK,WAAW5C,EAAO6C,OAAS,uBAG3D,kBAACH,EAAA,EAAD,KACE,kBAACW,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBlB,GAAG,yBAApB,sBAAiE,kBAAC,EAAD,QAEnE,kBAACF,EAAA,EAAK4B,QAAN,CAAcnB,KAAK,OAAOa,YAAY,kBAAkBC,aAAW,kBAAkBpB,KAAK,iBAAiBqB,mBAAiB,wBAAwBpB,IAAKzC,IAAY+D,YAAa7D,EAAO2K,iBACzL,kBAACxI,EAAA,EAAK4B,QAAQC,SAAd,CAAuBpB,KAAK,WAAW5C,EAAO2K,gBAAkB,wBAItE,6BACA,kBAAClI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACW,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBlB,GAAG,eAApB,UAEF,kBAACmB,EAAA,EAAD,CACEC,YAAY,IAAIC,aAAW,IAAIpB,KAAK,QAAQqB,mBAAiB,cAC7DpB,IAAKzC,EAAS,CAAE8D,QAAS/E,IACzBgF,UAAW7D,EAAO8D,QAEpB,kBAAC3B,EAAA,EAAK4B,QAAQC,SAAd,CAAuBpB,KAAK,WAAW5C,EAAO8D,OAAS,oCAG3D,kBAACpB,EAAA,EAAD,KACE,kBAACW,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBlB,GAAG,wBAApB,qBAA+D,2BAAOT,UAAU,aAAjB,WAEjE,kBAAC4B,EAAA,EAAD,CACEC,YAAY,IAAIC,aAAW,IAAIrB,GAAG,sBAAsBC,KAAK,gBAAgBqB,mBAAiB,iBAC9FpB,IAAKzC,EAAS,CAAEmE,SAAU,SAAApB,GAAK,OAAKqB,MAAMrB,MAC1CgB,UAAW7D,EAAOmE,gBAEpB,kBAAChC,EAAA,EAAK4B,QAAQC,SAAd,CAAuBpB,KAAK,WAAW5C,EAAOmE,eAAiB,wCAO1E/D,GAAW,kBAACiB,EAAA,EAAMgF,OAAP,KACV,kBAAC5B,EAAA,EAAD,CAAQ7B,KAAK,UAAb,cAUOsE,OAAMC,KAAKyC,IC3GXgB,GA9BM9C,sBAAW,SAAC+C,EAAOtI,GAAS,IAAD,EACtBhC,oBAAS,GADa,mBACvCjB,EADuC,KACjCwK,EADiC,KAExCgB,EAAUhC,iBAAO,IACvBkB,8BAAoBzH,GAAK,iBAAO,CAC9BuI,QAD8B,SACrBC,GACPD,EAAQ/B,QAAUgC,EAClBjB,GAAQ,QAaZ,OAAO,kBAACzI,EAAA,EAAD,CAAO/B,KAAMA,EAAM0L,UAAQ,EAACC,SAAS,SAASC,UAAU,GAC7D,kBAAC7J,EAAA,EAAMM,KAAP,CAAYC,UAAU,uBACpB,wBAAIA,UAAU,QAAQkJ,EAAQ/B,QAAQoC,OAAS,WAC9CL,EAAQ/B,QAAQqC,SAEnB,kBAAC/J,EAAA,EAAMgF,OAAP,KACE,kBAAC5B,EAAA,EAAD,CAAQ3C,QAAQ,YAAYF,UAAU,YAAYL,KAAK,KAAK6E,QAfhD,WACd0D,GAAQ,KAcN,MACA,kBAACrF,EAAA,EAAD,CAAQ3C,QAAQ,UAAUF,UAAU,OAAOL,KAAK,KAAK6E,QAZxC,WACf0E,EAAQ/B,QAAQsC,cAChBvB,GAAQ,KAUN,YCxBOwB,GAAuB,kBAAM,kBAACjC,EAAA,EAAD,CAAgBC,QAAQ,QAAQE,WAAS,EAACD,UAAU,QAAQE,QAAS,kBAACC,EAAA,EAAD,CAASrH,GAAG,iBACzH,kBAACqH,EAAA,EAAQC,QAAT,sGAEE,kBAAC4B,EAAA,EAAD,CAAOC,UAAQ,EAACC,SAAO,EAAC7J,UAAU,QAChC,+BACE,4BACE,4CACA,8CACA,+CAGJ,+BACE,4BACE,4BAAI,uBAAGsE,KAAK,2EAA2EC,OAAO,SAASkB,IAAI,uBAAvG,mBACJ,4BACE,2CAAsB,6BACtB,+CAEF,kCAEF,4BACE,4BAAI,uBAAGnB,KAAK,mFAAmFC,OAAO,SAASkB,IAAI,uBAA/G,2BACJ,4BACE,+DAEF,mCAEF,4BACE,4BAAI,uBAAGnB,KAAK,8EAA8EC,OAAO,SAASkB,IAAI,uBAA1G,sBACJ,4BAAI,8CACJ,mCAEF,4BACE,4BAAI,uBAAGnB,KAAK,iFAAiFC,OAAO,SAASkB,IAAI,uBAA7G,yBACJ,4BAAI,iDACJ,mCAEF,4BACE,4BAAI,uBAAGnB,KAAK,0EAA0EC,OAAO,SAASkB,IAAI,uBAAtG,kBACJ,4BACE,iDAA4B,6BAC5B,uDAAkC,6BAClC,2DAAsC,6BACtC,kEAAuD,6BACvD,+DAAoD,6BACpD,0DAAqC,6BACrC,mEAA8C,8BAEhD,kCAEF,4BACE,4BAAI,uBAAGnB,KAAK,6EAA6EC,OAAO,SAASkB,IAAI,uBAAzG,qBACJ,4BAAI,qDACJ,mCAEF,4BACE,4BAAI,uBAAGnB,KAAK,wCAAwCC,OAAO,SAASkB,IAAI,uBAApE,UACJ,4BAAI,mEACJ,wCAIE,kBAAC,IAAD,CAAYzF,UAAU,qBC9DrB8J,GAAe,kBAAM,kBAACrC,EAAA,EAAD,CAAgBC,QAAQ,QAAQC,UAAU,QAAQC,WAAS,EAACC,QAAS,kBAACC,EAAA,EAAD,CAASrH,GAAG,iBACjH,kBAACqH,EAAA,EAAQC,QAAT,KACE,kBAAC4B,EAAA,EAAD,CAAOC,UAAQ,EAACC,SAAO,EAAC7J,UAAU,QAChC,+BACE,4BACE,4BAAI,uBAAGsE,KAAK,4DAA4DC,OAAO,SAASkB,IAAI,uBAAxF,cACJ,4BAAI,oDAEN,4BACE,4BAAI,uBAAGnB,KAAK,+DAA+DC,OAAO,SAASkB,IAAI,uBAA3F,iBACJ,4BAAI,yDAEN,4BACE,4BAAI,uBAAGnB,KAAK,8DAA8DC,OAAO,SAASkB,IAAI,uBAA1F,gBACJ,4BAAI,sDAEN,4BACE,4BAAI,uBAAGnB,KAAK,+DAA+DC,OAAO,SAASkB,IAAI,uBAA3F,iBACJ,4BAAI,gEAEN,4BACE,4BAAI,uBAAGnB,KAAK,mEAAmEC,OAAO,SAASkB,IAAI,uBAA/F,qBACJ,4BAAI,qFAEN,4BACE,0CACA,4BAAI,oDAKF,kBAAC,IAAD,CAAYzF,UAAU,qBCsNnB+J,GAnOK7D,sBAAW,WAA0EvF,GAAS,IAAhF4H,EAA+E,EAA/EA,QAASzD,EAAsE,EAAtEA,YAAaC,EAAyD,EAAzDA,WAAYiF,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,SAAoB,EACvFvL,mBAAS4J,GAD8E,mBACxGnL,EADwG,KAClG+M,EADkG,OAErFxL,qBAFqF,mBAExGG,EAFwG,KAEjGC,EAFiG,KAGzGqL,EAAalD,mBACbmD,EAAcnD,kBAAO,GACrBoD,EAAepD,kBAAO,GAE5BkB,8BAAoBzH,GAAK,iBAAO,CAC9B4J,UAD8B,WAE5BJ,EAAQ,GAAD,mBAAK/M,GAAL,aAAC,eAAeoN,KAAhB,IAA+BC,OAAO,OAC7CH,EAAanD,SAAU,OAI3BnI,qBAAU,WACJqL,EAAYlD,QACdkD,EAAYlD,SAAU,EAGxBgD,EAAQ5B,KACP,CAACA,IAGJ,IAAMmC,EAAgB,CACpBC,KAAMpE,GAGFqE,EAAUtF,IAAMuF,SAAQ,iBAAM,CAClC,CACEjL,OAAQ,YACRkL,MAAO,CAAEhH,MAAO,QAChBiH,SAAU,WACVnE,SAAU,SACVvE,SAAU,SAAApB,GAAK,OAAKqB,MAAMrB,KACzB,CACDrB,OAAQ,OACRkL,MAAO,CAAEhH,MAAO,QAChBiH,SAAU,QACT,CACDnL,OAAQ,iBACRmL,SAAU,gBACVpE,UAAU,GACT,CACD/G,OAAQ,QACRmL,SAAU,SACT,CACDnL,OAAQ,SACRkL,MAAO,CAAEhH,MAAO,QAChBiH,SAAU,SACVnE,SAAU,SACV5E,QAAS/E,GACR,CACD2C,OAAQ,aACRkL,MAAO,CAAEhH,MAAO,SAChBiH,SAAU,iBACVnE,SAAU,SACVvE,SAAU,SAAApB,GAAK,OAAKqB,MAAMrB,QAE3B,IAEG+J,EAAe,CAAEhB,iBAYjBiB,EAAe,SAACC,GACpBf,GAAQ,SAAA5B,GAAO,OAAIA,EAAQ4C,QAAO,SAACC,EAASjG,GAAV,OAAoBA,IAAU+F,QAChEZ,EAAanD,SAAU,GAwBnBkE,EAAmB,WACvB,IAAI5M,GAAU,EAQd,OAPArB,EAAKkO,SAAQ,SAACC,EAAQpG,GACpBqG,SAASC,cAAT,sCAAsDtG,EAAQ,EAA9D,gCAA8FiC,UAAUC,OAAO,cAC1GkE,EAAOG,gBACVF,SAASC,cAAT,sCAAsDtG,EAAQ,EAA9D,gCAA8FiC,UAAUuE,IAAI,cAC5GlN,GAAU,MAGPA,GAYHmN,EAAgBC,mBAAS,CAAEjB,UAASxN,OAAMsN,gBAAeM,eAAcnE,aAzDxD,SAACqE,EAAUY,EAAU7K,GACxCkJ,GAAQ,SAAA5B,GAAO,OAAIA,EAAQtD,KAAI,SAACsG,EAAQpG,GACtC,OAAIA,IAAU+F,EACL,2BAAKK,GAAZ,kBAAqBO,EAAW7K,IAE3BsK,QAETjB,EAAanD,SAAU,KAoDjB4E,EAAuFH,EAAvFG,cAAeC,EAAwEJ,EAAxEI,kBAAmBC,EAAqDL,EAArDK,aAAcC,EAAuCN,EAAvCM,KAAMC,EAAiCP,EAAjCO,WAAYC,EAAqBR,EAArBQ,iBAE1EpN,qBAAU,WACJqL,EAAYlD,QACdkD,EAAYlD,SAAU,EAGxBiF,EAAiBpC,KAChB,CAACA,EAAeoC,IAEnB,IAIMC,EAAa,SAACC,EAAKC,EAAUC,GACjC,GAAIA,GAAYF,EAAIG,OAElB,IADA,IAAIC,EAAIF,EAAWF,EAAIG,OAAS,EACzBC,KACLJ,EAAIK,UAAKC,GAIb,OADAN,EAAIO,OAAOL,EAAU,EAAGF,EAAIO,OAAON,EAAU,GAAG,IACzCD,GAeT,OAAO,kBAAC/L,EAAA,EAAD,CAAMc,SAjFO,SAACwE,GACnBA,EAAEQ,iBACFtH,IACIsM,KACFtG,GAAW,SAAAC,GAAO,OAAIA,EAAQC,KAAI,SAACC,EAAQC,GACzC,OAAIA,IAAUL,GACZI,EAAOqD,QAAP,YAAqBnL,GACd8H,GAEFA,QAEToF,EAAanD,SAAU,EACvB+C,EAAS/C,QAAQwF,KAAK,CACpBG,KAAM,2BAAG,0BAAM9M,UAAU,uBAAhB,WAAH,yBACN+M,OAAQ,4BAAQ/M,UAAU,WAAlB,cAGVjB,EAAS,kCAiEX,kBAAC4K,EAAA,EAAD,eAAOqD,OAAK,GAAKjB,IAAjB,CAAkCtL,GAAG,UAAUwM,YAAU,IACvD,+BACGhB,EAAahH,KAAI,SAACiI,EAAa/H,GAAd,OAChB,wCAAQ+H,EAAYC,sBAApB,CAA2CrE,IAAK3D,IAC9C,wBAAI2F,MAAO,CAAEhH,MAAO,UACnBoJ,EAAYE,QAAQnI,KAAI,SAACyB,EAAQvB,GAAT,OACvB,wCAAQuB,EAAO2G,eAAe,CAAC,CAAEvC,MAAOpE,EAAOoE,SAA/C,CAA0DhC,IAAK3D,IAC5DuB,EAAO4G,OAAO,UADjB,IAC6B5G,EAAOC,UAAY,2BAAO3G,UAAU,eAAjB,KAC3B,mBAAlB0G,EAAO9G,QAA+B,kBAAC,GAAD,MACpB,UAAlB8G,EAAO9G,QAAsB,kBAAC,GAAD,UAGlC,wBAAIkL,MAAO,CAAEhH,MAAO,eAI1B,0BAAWkI,IACRE,EAAKjH,KAAI,SAACwB,EAAKtB,GAEd,OADAgH,EAAW1F,GACH,wCAAQA,EAAI8G,cAAZ,CAA2BzE,IAAK3D,IACtC,wBAAIqI,MAAM,UACR,yBAAKxN,UAAU,yCACb,kBAAC,IAAD,CAAS8D,MAAM,KAAKC,OAAO,KAAKS,QAAS,SAACqB,GAAD,OAnCxC,SAACA,EAAG4H,GACgC,OAA7C5H,EAAEG,cAAc0H,aAAa,cAC/BvD,GAAQ,SAAA5B,GAAO,mBAAQ8D,EAAW9D,GAAUkF,EAAOA,EAAQ,OAC3DnD,EAAanD,SAAU,GAgCmCwG,CAAO9H,EAAGY,EAAIhG,KAAKqC,SAAoB,IAAVqC,IAC7E,kBAAC,IAAD,CAAWrB,MAAM,KAAKC,OAAO,KAAKS,QAAS,SAACqB,GAAD,OA9BxC,SAACA,EAAG4H,GAC8B,OAA7C5H,EAAEG,cAAc0H,aAAa,cAC/BvD,GAAQ,SAAA5B,GAAO,mBAAQ8D,EAAW9D,GAAUkF,GAAQA,EAAQ,OAC5DnD,EAAanD,SAAU,GA2BqCyG,CAAS/H,EAAGY,EAAIhG,KAAKqC,SAAUqC,IAAU+G,EAAKO,OAAS,MAG5GhG,EAAIoH,MAAM5I,KAAI,SAAC6I,EAAM3I,GAAP,OACb,wCAAQ2I,EAAKC,eAAb,CAA6BjF,IAAK3D,IAC/B2I,EAAKR,OAAO,YAGjB,wBAAIE,MAAM,UACR,kBAAC,IAAD,CAAWxN,UAAU,oBAAoB8D,MAAM,KAAKC,OAAO,KAAKS,QAAS,kBA5DnE,SAACiC,GACjBwD,EAAS9C,QAAQkB,UAAU5B,EAAIhG,GAAIgG,EAAIuH,SAAS1F,OA2DyCD,CAAU5B,MACzF,kBAAC5D,EAAA,EAAD,CAAQ3C,QAAQ,OAAOF,UAAU,MAAMwE,QAAS,YAlFhC,SAAC0G,GAC3B,IAAMxK,EAAI,YAAQwK,EAAW,EAAnB,cAA0B9N,EAAK8N,GAAUxK,MAAQtD,EAAK8N,GAAUQ,eAAiB,OAC3FtB,EAAWjD,QAAQ+B,QAAQ,CACzBK,MAAO,gBACPC,QAAS,qDAA0B,0BAAMxJ,UAAU,mBAAmBU,GAA7D,YACT+I,YAAawB,EAAagD,KAAK,KAAMzQ,OAAO0N,MA6EoBgD,CAAoBzH,EAAIhG,KAAOqC,SAA0B,IAAhB1F,EAAKqP,QACpG,kBAAC,IAAD,CAASzM,UAAW,aAA+B,IAAhB5C,EAAKqP,OAAe,aAAe,eAAgB3I,MAAM,KAAKC,OAAO,eAOnHuG,EAAanD,SAAW,yBAAKnH,UAAU,sDACtC,0BAAMA,UAAU,oBAAoBlB,GACpC,kBAAC+D,EAAA,EAAD,CAAQ7B,KAAK,UAAb,SAEF,kBAAC,GAAD,CAAcL,IAAKyJ,QCzNjB+D,GAAuB,CAAC,OAAQ,WAAY,SAAU,kBAuD7C7I,OAAMC,MArDN,SAAC,GAA8D,IAA5DgD,EAA2D,EAA3DA,QAASzD,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,WAAYkF,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EACjCvL,mBAASyP,IAAalP,QAJxC,gBAImEiP,KADhB,mBACpEnE,EADoE,KACrDoC,EADqD,KAErEiC,EAAiBnH,mBACjBmD,EAAcnD,kBAAO,GAErBoH,EAAiB,SAACzI,GACtB,IAAMa,EAASb,EAAEG,cAAc0H,aAAa,eACtCvI,EAAQ6E,EAAczM,QAAQmJ,GACpC0F,GAAiB,SAAApC,GAAa,OAAe,IAAX7E,EAAe6E,EAAcmB,QAAO,SAACoD,EAASC,GAAV,OAAqBA,IAAWrJ,KAApE,sBAAiF6E,GAAjF,CAAgGtD,QAWpI,OARA1H,qBAAU,WACJqL,EAAYlD,QACdkD,EAAYlD,SAAU,EAGxBiH,IAAa9M,QAnBS,gBAmBkB0I,KACvC,CAACA,IAEG,kBAAC1J,EAAA,EAAD,KACL,kBAACA,EAAA,EAAKV,OAAN,CAAa4F,GAAG,MACd,kBAAC3E,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKd,UAAU,6BACb,uBAAGuE,OAAO,SAASkB,IAAI,sBAAsBnB,KAAK,0CAAlD,WAEF,kBAACxD,EAAA,EAAD,CAAKS,GAAG,OAAOvB,UAAU,6BACvB,kBAAC6C,EAAA,EAAD,CAAQ3C,QAAQ,UAAUsE,QAAS,WAAQ6J,EAAelH,QAAQoD,cAAlE,cACA,kBAACkE,EAAA,EAAD,CAAUC,YAAU,EAAC1O,UAAU,QAC7B,kBAACyO,EAAA,EAASxK,OAAV,CAAiBuB,GAAIS,GACnB,kBAAC,IAAD,CAAanC,MAAM,KAAKC,OAAO,QAEjC,kBAAC0K,EAAA,EAASE,KAAV,KACE,kBAACF,EAAA,EAASG,KAAV,CAAepK,QAAS8J,EAAgBO,cAAY,OAAOlK,QAA2C,IAAnCqF,EAAczM,QAAQ,SAAzF,QACA,kBAACkR,EAAA,EAASG,KAAV,CAAepK,QAAS8J,EAAgBO,cAAY,WAAWlK,QAA+C,IAAvCqF,EAAczM,QAAQ,aAA7F,aACA,kBAACkR,EAAA,EAASG,KAAV,CAAepK,QAAS8J,EAAgBO,cAAY,SAASlK,QAA6C,IAArCqF,EAAczM,QAAQ,WAA3F,UACA,kBAACkR,EAAA,EAASG,KAAV,CAAepK,QAAS8J,EAAgBO,cAAY,iBAAiBlK,QAAqD,IAA7CqF,EAAczM,QAAQ,mBAAnG,mBAMV,kBAAC+C,EAAA,EAAKP,KAAN,KACE,kBAAC,GAAD,CAAaY,IAAK0N,EAAgBnE,SAAUA,EAAU3B,QAASA,EAASzD,YAAaA,EAAaC,WAAYA,EAAYiF,cAAeA,EAAeC,SAAUA,S,SCjD3J6E,GAAmB,kBAAM,kBAACrH,EAAA,EAAD,CAAgBC,QAAQ,QAAQC,UAAU,QAAQC,WAAS,EAACC,QAAS,kBAACC,EAAA,EAAD,CAASrH,GAAG,iBACrH,kBAACqH,EAAA,EAAQhI,MAAT,iBACA,kBAACgI,EAAA,EAAQC,QAAT,KACE,4BACE,4BAAI,6CAAJ,sBACA,4BAAI,6CAAJ,sBACA,4BAAI,6CAAJ,qEACA,4BAAI,6CAAJ,0BAGM,kBAAC,IAAD,CAAY/H,UAAU,qBCN5B3C,GAAgB,CAAC,YAgGR0R,GA/FI,SAAC,GAAyC,IAAvC7J,EAAsC,EAAtCA,OAAQJ,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WACnCsF,EAAcnD,kBAAO,GAD+B,EAEyBtJ,YAAQ,CACzFC,KAAM,SACNC,eAAgB,WAChBC,cAAemH,EACfjH,kBAAkB,IAJZC,EAFkD,EAElDA,SAAUC,EAFwC,EAExCA,aAAcC,EAF0B,EAE1BA,OAAQC,EAFkB,EAElBA,MAFkB,IAEXE,UAAaC,EAFF,EAEEA,QAASC,EAFX,EAEWA,QAOrEO,qBAAU,WACJqL,EAAYlD,QACdkD,EAAYlD,SAAU,EAGxB9I,EAAM6G,KACL,CAACA,EAAQ7G,IAaZ,OAAO,kBAACkC,EAAA,EAAD,CAAMc,SAAUlD,GAXN,SAAAf,GACfD,EAAmBC,EAAMC,IACzBgB,EAAMjB,GACN2H,GAAW,SAAAC,GAAO,OAAIA,EAAQC,KAAI,SAACC,EAAQC,GACzC,OAAIA,IAAUL,EACL,2BAAKI,GAAW9H,GAElB8H,YAKT,kBAAC5E,EAAA,EAAKP,KAAN,KACE,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKS,GAAG,IAAIC,GAAG,MACb,kBAACC,EAAA,EAAD,CAAYzB,UAAU,QACpB,kBAACyB,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBlB,GAAG,eAApB,SAEF,kBAACmB,EAAA,EAAD,CAAalB,KAAK,OAAOC,IAAKzC,EAAU2D,YAAY,qBAAqBC,aAAW,qBAAqBC,mBAAiB,kBAG9H,kBAACjB,EAAA,EAAD,CAAKS,GAAG,IAAIC,GAAG,MACb,kBAACC,EAAA,EAAD,CAAYzB,UAAU,QACpB,kBAACyB,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBlB,GAAG,cAApB,UAA0C,2BAAOT,UAAU,eAAjB,OAE5C,kBAAC4B,EAAA,EAAD,CACElB,KAAK,MAAMC,IAAKzC,EAAS,CAAEyI,UAAU,IACrC1E,YAAa7D,EAAO4Q,IACpBnN,YAAY,8BAA8BC,aAAW,8BAA8BC,mBAAiB,eAEtG,kBAACxB,EAAA,EAAK4B,QAAQC,SAAd,CAAuBpB,KAAK,WAAW5C,EAAO4Q,KAAO,qBAGzD,kBAAClO,EAAA,EAAD,CAAKS,GAAG,IAAIC,GAAG,MACb,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBlB,GAAG,oBAApB,gBAAsD,2BAAOT,UAAU,aAAjB,WAExD,kBAAC4B,EAAA,EAAD,CACEjB,IAAKzC,EAAS,CAAEmE,SAAU,SAAApB,GAAK,OAAKqB,MAAMrB,MAC1CgB,YAAa7D,EAAO6Q,SAAUvO,KAAK,WAAWmB,YAAY,IAAIC,aAAW,IAAIC,mBAAiB,qBAEhG,kBAACxB,EAAA,EAAK4B,QAAQC,SAAd,CAAuBpB,KAAK,WAAW5C,EAAO6Q,UAAY,oCAG9D,kBAACnO,EAAA,EAAD,CAAKS,GAAG,IAAIC,GAAG,MACb,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBlB,GAAG,qBAApB,iBAAwD,kBAAC,GAAD,QAE1D,kBAACmB,EAAA,EAAD,CACEjB,IAAKzC,EAAS,CAAE8D,QAAS9E,IACzB+E,YAAa7D,EAAO8Q,UACpBxO,KAAK,YAAYmB,YAAY,cAAcC,aAAW,cAAcC,mBAAiB,sBAEvF,kBAACxB,EAAA,EAAK4B,QAAQC,SAAd,CAAuBpB,KAAK,WAAW5C,EAAO8Q,WAAa,8CAIhE1Q,GAAW,yBAAKwB,UAAU,mCACzB,kBAAC6C,EAAA,EAAD,CAAQ7B,KAAK,SAAS8B,UAAWrE,GAAjC,YCiBO6G,OAAMC,MA5FN,SAAC,GAAmD,IAAjDL,EAAgD,EAAhDA,OAAQJ,EAAwC,EAAxCA,YAAaoF,EAA2B,EAA3BA,SAAUnF,EAAiB,EAAjBA,WACzCoK,EAAcC,sBAiDpB,OAAO,kBAAC9O,EAAA,EAAD,CAAMN,UAAU,QACrB,kBAACM,EAAA,EAAKV,OAAN,CAAa4F,GAAG,MACd,kBAAC3E,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKd,UAAU,6BACb,uBAAGuE,OAAO,SAASkB,IAAI,sBAAsBnB,KAAK,iDAAlD,kBAEF,kBAACxD,EAAA,EAAD,CAAKS,GAAG,OAAOvB,UAAU,6BACvB,kBAACO,EAAA,EAAKC,MAAN,CAAYQ,KAAK,SAASN,KAAK,SAASD,GAAG,gBAAgBG,MAAM,SAAS8E,QAASR,EAAOmK,OAAQzJ,SAvDzF,SAACC,GAAO,IAAD,EACEC,IAAYC,aAAaF,EAAEG,eAA3CtF,EADc,EACdA,KAAMO,EADQ,EACRA,MACd8D,GAAW,SAAAC,GAAO,OAAIA,EAAQC,KAAI,SAACC,EAAQC,GACzC,OAAIA,IAAUL,EACL,2BAAKE,EAAQF,IAApB,kBAAmCpE,EAAOO,IAErCiE,WAkDH,kBAACuJ,EAAA,EAAD,CAAUzO,UAAU,OAAO0O,YAAU,GACnC,kBAACD,EAAA,EAASxK,OAAV,CAAiBuB,GAAIS,GACnB,kBAAC,KAAD,CAAmBnC,MAAM,KAAKC,OAAO,QAEvC,kBAAC0K,EAAA,EAASE,KAAV,KACE,kBAACF,EAAA,EAASG,KAAV,CAAetK,KAAK,aAAaE,QAnDxB,WACnB8K,IAAcC,OAAOrK,EAAOxE,MAAQwE,EAAO8J,KAAtB,wBAA8ClK,GAAeI,GAAQ5F,OAAM,SAAAR,GAC9FoL,EAAS/C,QAAQwF,KAAK,CACpBG,KAAM1M,KAAKC,UAAUvB,GACrBiO,OAAQ,4BAAQ/M,UAAU,WAAlB,gBACRwP,UAAW,qBA8CL,UACA,kBAACf,EAAA,EAASG,KAAV,CAAetK,KAAK,aAAaE,QAAS,SAAAhF,GAAC,OAAI2P,EAAYhI,QAAQsI,UAAnE,YAGJ,yBAAKzP,UAAU,sBACb,2BAAOgB,KAAK,OAAOhB,UAAU,oBAAoBW,IAAKwO,EAAaO,OAAO,QAAQjP,GAAG,uBAAuBmF,SA9CjG,SAACC,GACpB,IAAI8J,EAAQ9J,EAAEG,cAAc2J,MAC5B,GAAIA,EAAMlD,QAAU,EAClB,OAAO,EAET,IAAImD,EAAK,IAAIC,WACbD,EAAGE,OAAS,SAAUjK,GACpB,IACE,IAAMkK,EAAU3P,KAAK4P,MAAMnK,EAAEtB,OAAO0L,QAC9BC,EAAQH,EAAQrP,MAAQqP,EAAQf,KAAO,gBAC7CmB,IAAcC,OAAOL,EAAS5Q,IAAkBkR,SAChDnG,EAAS/C,QAAQwF,KAAK,CACpBG,KAAM,2BAAG,0BAAM9M,UAAU,uBAAuBkQ,GAA1C,2BACNnD,OAAQ,4BAAQ/M,UAAU,WAAlB,iBACRsQ,MAAO,IACPC,QAAS,WAAQnN,OAAOoN,SAASC,YAEnC,MAAO3R,GACPoL,EAAS/C,QAAQwF,KAAK,CACpBG,KAAM1M,KAAKC,UAAUvB,GACrBiO,OAAQ,4BAAQ/M,UAAU,WAAlB,gBACRwP,UAAW,kBAIjBI,EAAGc,WAAWf,EAAMgB,KAAK,OAsBjB,2BAAO3Q,UAAU,oBAAoB4Q,QAAQ,uBAAuB9F,MAAO,CAAE+F,SAAU,OAAWC,WAAY,MAA9G,cAKP5L,EAAOmK,QAAU,kBAAC,GAAD,CAAYnK,OAAQA,EAAQJ,YAAaA,EAAaC,WAAYA,QCrF3EgM,GAAgB,SAAC/B,EAAK7J,GACjC,IAAIzE,EAAI,wBAAoByE,GAM5B,OALI6J,GAA8B,OAAvBA,EAAIpL,MAAM,SACnBlD,EAAOsO,EAAIgC,MAAM,KAAK,GACbhC,IACTtO,EAAOsO,GAEFtO,GC0LMuQ,GAjLC,SAAC,GAAkB,IAAhB/G,EAAe,EAAfA,SAAe,EACFvL,mBAAS,CAAC,eAAKuS,OADb,mBACzBlM,EADyB,KAChBD,EADgB,OAEApG,mBAAS,GAFT,mBAEzBwS,EAFyB,KAEfC,EAFe,OAGFzS,oBAAS,GAHP,mBAGzBC,EAHyB,KAGhBC,EAHgB,OAINF,qBAJM,mBAIzBG,EAJyB,KAIlBC,EAJkB,KAK1BmG,EAASF,EAAQmM,GACjB9G,EAAcnD,kBAAO,GACrB+C,EAAW/C,mBACXkD,EAAalD,mBACbiI,EAAcC,sBAEpBpQ,qBAAU,WACRC,IAAeC,QAAQC,IAAkBkR,QAAS,CAAC,2BAAKa,KAAN,IAAqBxQ,KAAM,OAAOrB,MAAK,SAAAgS,GACvFD,EAAYE,EAAiBD,IAC7BtM,EAAWsM,MACV/R,MAAMP,GAAUQ,SAAQ,SAAAC,GAAC,OAAIX,GAAW,QAC1C,IAEH,IAAMyS,EAAmB,SAACtM,GACxB,IAAMuM,EAAS,GACXC,EAAsB,EAC1B,GAAIpO,OAAOoN,SAASiB,OAAQ,CAC1B,IAAMC,EAAStO,OAAOoN,SAASiB,OAAOE,QAAQ,IAAK,IAAIX,MAAM,KAC7D,IAAK,IAAM7L,KAASuM,EAAQ,CAAC,IAAD,EACJA,EAAOvM,GAAO6L,MAAM,KADhB,mBACnBtQ,EADmB,KACbO,EADa,KAE1BsQ,EAAO7Q,GAAQkR,mBAAmB3Q,GAEpC,GAAIsQ,EAAOvC,IAET,IAA6B,KAD7BwC,EAAsBxM,EAAQ6M,WAAU,SAAA3M,GAAM,OAAIA,EAAO8J,MAAQuC,EAAOvC,SACtCuC,EAAO7F,cAAe,CACtD,IAAMxG,EAAM,2BAAQgM,KAAR,IAAuBxQ,KAAM,uBACzCwE,EAAO8J,IAAMuC,EAAOvC,IACpB9J,EAAOqD,QAAQ,GAAGmD,cAAgB6F,EAAO7F,cACzC1G,EAAQ2H,KAAKzH,GACbsM,EAAsBxM,EAAQyH,OAAS,OAClC,GAAI8E,EAAOzS,MAAO,CACvB,IAAMgT,EAAa9M,EAAQwM,GAAqBjJ,QAAQsJ,WAAU,SAAAtG,GAAM,OAAIA,EAAOG,gBAAkB6F,EAAO7F,kBACxF,IAAhBoG,IACF9M,EAAQwM,GAAqBjJ,QAAQuJ,GAAYhT,MAAQ,sBAEtD,GAAIyS,EAAO7F,cAAe,CAE/B,IAAoB,IADD1G,EAAQwM,GAAqBjJ,QAAQsJ,WAAU,SAAAtG,GAAM,OAAIA,EAAOG,gBAAkB6F,EAAO7F,iBACrF,CACrB,IAAMH,EAAM,eAAQf,KACpBe,EAAOG,cAAgB6F,EAAO7F,cAC9B1G,EAAQwM,GAAqBjJ,QAAQoE,KAAKpB,KAKlD,OAAOiG,GAGTxS,qBAAU,WACJqL,EAAYlD,QACdkD,EAAYlD,SAAU,EAGxBlI,IAAeqC,QAAQnC,IAAkBkR,QAASrL,GAAS1F,MAAMP,GAAUQ,SAAQ,SAAAC,GAAC,OAAIX,GAAW,QAClG,CAACmG,IAEJ,IAaM+M,EAAe,WACnB,IAAMrR,EAAOsE,EAAQmM,GAAUzQ,KAC/B7B,GAAW,GACXkG,EAAWC,EAAQmG,QAAO,SAAC4E,EAAS5K,GAAV,OAAoBA,IAAUgM,MACxDC,GAAY,SAAAD,GAAQ,OAAuB,IAAnBnM,EAAQyH,OAAe,EAAiB,IAAb0E,EAAiBA,EAAWA,EAAW,KAC1FtS,GAAW,GACXqL,EAAS/C,QAAQwF,KAAK,CACpBG,KAAM,2BAAG,0BAAM9M,UAAU,sBAAsBU,GAAzC,yBACNqM,OAAQ,4BAAQ/M,UAAU,WAAlB,oBA8CZ,OAAO,oCACJpB,EAAU,kBAAC,UAAD,CAASoB,UAAU,sCAC1BlB,EAAQ,kBAACmB,EAAA,EAAD,CAAOC,QAAQ,UAAS,kBAACD,EAAA,EAAME,QAAP,cAAqCC,KAAKC,UAAUvB,IAAkB,oCACtG,kBAACwB,EAAA,EAAD,CAAMN,UAAU,QACd,kBAACM,EAAA,EAAKP,KAAN,KACE,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACP,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKyR,MAAN,CAAYC,UAAU,WAAWjS,UAAU,QACzC,kBAACO,EAAA,EAAK4B,QAAN,CAAcqD,GAAG,SAASiD,QAAM,EAAC7C,SA5ElC,SAACC,GAChBuL,EAAYtL,IAAYoM,SAASrM,EAAEG,iBA2EkC/E,MAAOkQ,EAAUgB,YAAU,UAC7EnN,EAAQC,KAAI,SAACC,EAAQC,GAAT,OAAmB,4BAAQ2D,IAAK3D,EAAOlE,MAAOkE,GAAQD,EAAOxE,MAAQqQ,GAAc7L,EAAO8J,IAAK7J,WAKpH,kBAACrE,EAAA,EAAD,CAAKS,GAAG,OAAOvB,UAAU,6BACvB,kBAAC6C,EAAA,EAAD,CAAQ7B,KAAK,SAASd,QAAQ,UAAUsE,QA/EpC,WAChB,IAAM9D,EAAOqQ,QAAcnE,EAAW5H,EAAQyH,QAC9C1H,EAAW,GAAD,mBAAKC,GAAL,aAAC,eAAkBkM,KAAnB,IAAkCxQ,YAC5CwJ,EAAS/C,QAAQwF,KAAK,CACpBG,KAAM,2BAAG,0BAAM9M,UAAU,uBAAuBU,GAA1C,wBACNqM,OAAQ,4BAAQ/M,UAAU,WAAlB,qBA0EE,qBACA,kBAACyO,EAAA,EAAD,CAAUzO,UAAU,OAAO0O,YAAU,GACnC,kBAACD,EAAA,EAASxK,OAAV,CAAiBuB,GAAIS,EAAgBxF,GAAG,kBACtC,kBAAC,KAAD,CAAmBqD,MAAM,KAAKC,OAAO,QAEvC,kBAAC0K,EAAA,EAASE,KAAV,KACE,kBAACF,EAAA,EAASG,KAAV,CAAepK,QAvDf,WAChB8K,IAAcC,OAAO,qBAAsBvK,GAAS1F,OAAM,SAAAR,GACxDoL,EAAS/C,QAAQwF,KAAK,CACpBG,KAAM1M,KAAKC,UAAUvB,GACrBiO,OAAQ,4BAAQ/M,UAAU,WAAlB,gBACRwP,UAAW,qBAkDC,cACA,kBAACf,EAAA,EAASG,KAAV,CAAepK,QAAS,SAAAhF,GAAC,OAAI2P,EAAYhI,QAAQsI,UAAjD,cACA,kBAAChB,EAAA,EAAS2D,QAAV,MACA,kBAAC3D,EAAA,EAASG,KAAV,CAAepK,QAnEL,WAC1B,IAAM9D,EAAOsE,EAAQmM,GAAUzQ,MAAQsE,EAAQmM,GAAUnC,KAA5C,wBAAoEmC,GACjF/G,EAAWjD,QAAQ+B,QAAQ,CACzBK,MAAO,uBACPC,QAAS,qDAA0B,0BAAMxJ,UAAU,sBAAsBU,GAAhE,mBACT+I,YAAasI,KA8D8C/R,UAA8B,IAAnBgF,EAAQyH,OAAe,aAAe,cAAe3J,SAA6B,IAAnBkC,EAAQyH,QAA/H,0BAGJ,yBAAKzM,UAAU,sBACb,2BAAOgB,KAAK,OAAOhB,UAAU,oBAAoBW,IAAKwO,EAAaO,OAAO,QAAQjP,GAAG,wBAAwBmF,SApD3G,SAACC,GACjB,IAAI8J,EAAQ9J,EAAEG,cAAc2J,MAC5B,GAAIA,EAAMlD,QAAU,EAClB,OAAO,EAET,IAAImD,EAAK,IAAIC,WACbD,EAAGE,OAAS,SAAUjK,GACpB,IACEhH,GAAW,GACXkG,EAAW3E,KAAK4P,MAAMnK,EAAEtB,OAAO0L,SAC/BmB,EAAY,GACZvS,GAAW,GACX,MAAOC,GACPoL,EAAS/C,QAAQwF,KAAK,CACpBG,KAAM1M,KAAKC,UAAUvB,GACrBiO,OAAQ,4BAAQ/M,UAAU,WAAlB,gBACRwP,UAAW,kBAIjBI,EAAGc,WAAWf,EAAMgB,KAAK,OAiCX,2BAAO3Q,UAAU,oBAAoB4Q,QAAQ,wBAAwB9F,MAAO,CAAE+F,SAAU,OAAWC,WAAY,MAA/G,mBAMV,kBAAC,GAAD,CAAQ5L,OAAQA,EAAQJ,YAAaqM,EAAUjH,SAAUA,EAAUnF,WAAYA,IAC/E,kBAACsN,GAAD,CAAc1R,IAAKyJ,IAClBlF,EAAOmK,QAAU,oCAChB,kBAAC,EAAD,CAAOxK,MAAOK,EAAOL,MAAOC,YAAaqM,EAAUpM,WAAYA,IAC/D,kBAAC,GAAD,CAAQwD,QAASrD,EAAOqD,QAASzD,YAAaqM,EAAUjH,SAAUA,EAAUnF,WAAYA,EAAYkF,SAAUA,IAC9G,kBAAC,GAAD,CAAYtJ,IAAKsJ,EAAUnF,YAAaqM,EAAUpM,WAAYA,Q,kBCvLlEuN,GAAepM,sBAAW,SAAC+C,EAAOtI,GAAS,IAAD,EACtBhC,mBAAS,IADa,mBACvC4T,EADuC,KACjCC,EADiC,KAkB9C,OANApK,8BAAoBzH,GAAK,iBAAO,CAC9BgM,KAD8B,SACxB8F,GACJD,EAAQ,CAACC,GAAF,mBAAYF,UAIhB,yBAAKvS,UAAU,iBACnBuS,EAAKtN,KAAI,WAAgGE,GAAW,IAAxG2H,EAAuG,EAAvGA,KAAMC,EAAiG,EAAjGA,OAAQyC,EAAyF,EAAzFA,UAAWkD,EAA8E,EAA9EA,YAA8E,IAAjEpC,aAAiE,MAAzD,IAAyD,MAAnDqC,gBAAmD,aAAlCjV,YAAkC,SAArB6S,EAAqB,EAArBA,QAC7F,OAAO,kBAACqC,GAAA,EAAD,CAAO9J,IAAK3D,EAAOoL,QAAS,WAjBzB,IAACY,IAiBsChM,EAhBnDqN,GAAQ,SAAAD,GAAI,OAAIA,EAAKtN,KAAI,SAACwN,EAAOtN,GAC/B,OAAIA,IAAUgM,EACL,2BAAKsB,EAAMtB,IAAlB,IAA6BzT,MAAM,IAE9B+U,QAYkDlC,GAAWA,EAAQpL,IAAUzH,KAAMA,EAAM4S,MAAOA,EAAOqC,SAAUA,GACxH,kBAACC,GAAA,EAAMhT,OAAP,CAAcI,UAAW0S,GAAc3F,GACvC,kBAAC6F,GAAA,EAAM7S,KAAP,CAAYC,UAAWwP,GAAY1C,WAK3CwF,GAAahM,YAAc,eACZgM,U,UC5BFO,GAAQ,SAAC,GAA0B,IAAxB/T,EAAuB,EAAvBA,MAAOkB,EAAgB,EAAhBA,UAC7B,OAAO,kBAACC,EAAA,EAAD,CAAOC,QAAQ,SAASF,UAAWA,GACxC,kBAACC,EAAA,EAAME,QAAP,cACCC,KAAKC,UAAUvB,KCqBLgU,GAzBG,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAO/B,OANFjU,qBAAU,YAELoE,OAAO8P,YAAc9P,OAAO8P,aAAe,IAAIvG,KAAK,MAEtD,IAGC,yBACE3M,UAAU,cACV8K,MAAO,CAAEqI,QAAS,SAClBC,iBAAgBL,EAChBM,eAAcL,EACdM,iBAAgBL,EAChBM,6BAA2B,UCyBpBC,OA/Bf,WACE,IAAMtJ,EAAWhD,mBADH,EAEkBvI,qBAFlB,mBAEP8U,EAFO,KAEGC,EAFH,OAGY/U,qBAHZ,mBAGPG,EAHO,KAGAC,EAHA,KAKdC,qBAAU,WACR2U,IAAgBC,OAAO,CAAC,OAAQ,YAAYvU,KAAKqU,GAAapU,OAAM,SAAAR,GAClEC,EAASD,GACa,kEAAlBA,EAAM0K,UACRpG,OAAOoN,SAASlM,KAAO,oCAG1B,IAEH,IACE,OAAO,kBAACuP,GAAA,EAAD,KACJ/U,EAAQ,kBAAC,GAAD,CAAOA,MAAOA,EAAOkB,UAAU,SAAWyT,GAAY,oCAC7D,kBAAC,EAAD,CAAQ/S,KAAM+S,EAAS/S,OACvB,8BACE,kBAAC,GAAD,CAASwJ,SAAUA,KAErB,kBAAC,EAAD,CAAQxF,QAAS+O,EAAS/O,UAC1B,kBAAC,GAAD,CAAc/D,IAAKuJ,KAErB,kBAAC,GAAD,CAAW6I,OAAO,0BAA0BC,KAAK,aAAaC,OAAO,UAEvE,MAAOnU,GACPgV,QAAQhV,MAAM,OAAQA,KC1BNiV,QACW,cAA7B3Q,OAAOoN,SAASwD,UAEe,UAA7B5Q,OAAOoN,SAASwD,UAEhB5Q,OAAOoN,SAASwD,SAASpQ,MACvB,2DCVNR,OAAO6Q,UAAYC,uVAEnBC,IAAS7G,OAAO,kBAAC,GAAD,MAAS9B,SAAS4I,eAAe,SPG/ChR,OAAOiR,EAAE7I,UAAU8I,SAAQ,SAAUzO,GACnC,OAAqB,MAAdA,EAAE0O,WAAsB1O,EAAE2O,UAAY3O,EAAE4O,UAA0B,KAAd5O,EAAE0O,eAAmB,KAElFnR,OAAOiR,EAAE7I,UAAUkJ,GAAG,eAAe,SAAU7O,GAC7CA,EAAEQ,oBOFNjD,OAAOuR,QAAU,SAAUnL,GACzBoL,IAAU9V,MAAM,CAAE4B,KAAM,mBAAoBmU,MAAOrL,KAGrDsK,QAAQhV,MAAS,WAAa,IACpBA,EAAUgV,QAAVhV,MACR,OAAO,WAAoB,IAAD,uBAANgW,EAAM,yBAANA,EAAM,gBACxBF,IAAU9V,MAAM,CAAE4B,KAAM,mBAAoBmU,MAAOC,EAAK,KACxDhW,EAAMiW,MAAMjB,QAASgB,IAJR,GDgHX,kBAAmBE,WACrBA,UAAUC,cAAcC,MACrB7V,MAAK,SAAA8V,GACJA,EAAaC,gBAEd9V,OAAM,SAAAR,GACLgV,QAAQhV,MAAMA,EAAM0K,c","file":"static/js/main.398f5beb.chunk.js","sourcesContent":["export const REGEX_NUM = /^\\d+$/\r\nexport const REGEX_START_TIME = /^\\d{2}:\\d{2}:\\d{2}:\\d{2}$/\r\n","export const convertNumberField = (data, NUMBER_FIELDS) => {\r\n  for (const field in data) {\r\n    if (NUMBER_FIELDS.indexOf(field) !== -1 && data[field].indexOf('e') === -1) {\r\n      data[field] = Number(data[field])\r\n    }\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Modal, Form, Card, InputGroup, FormControl, Row, Col, Button, Alert } from 'react-bootstrap'\r\nimport { defaultSetting, LOAD_TYPES, RETRY_OPTIONS, LOCAL_STORAGE_KEY } from '@dhruv-techapps/acf-common'\r\nimport { ReactComponent as VolumeUp } from 'bootstrap-icons/icons/volume-up.svg'\r\nimport { ReactComponent as VolumeMute } from 'bootstrap-icons/icons/volume-mute.svg'\r\nimport { StorageService } from '@dhruv-techapps/core-common'\r\nimport { Loading } from '@dhruv-techapps/core-components'\r\nimport { useForm } from 'react-hook-form'\r\nimport { REGEX_NUM } from '../util/regex'\r\nimport { convertNumberField } from '../util/validation'\r\n\r\nconst NUMBER_FIELDS = ['retry', 'retryInterval']\r\n\r\nconst SettingsModal = ({ show, handleClose }) => {\r\n  const { register, handleSubmit, errors, reset, watch, formState: { isDirty, isValid } } = useForm({\r\n    mode: 'onBlur',\r\n    reValidateMode: 'onChange',\r\n    defaultValues: defaultSetting,\r\n    shouldFocusError: true\r\n  })\r\n  const notificationSound = watch('notifications.sound')\r\n\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState()\r\n\r\n  useEffect(() => {\r\n    StorageService.getItem(LOCAL_STORAGE_KEY.SETTINGS, defaultSetting).then(reset).catch(setError).finally(_ => setLoading(false))\r\n  }, [reset])\r\n\r\n  const onSubmit = data => {\r\n    convertNumberField(data, NUMBER_FIELDS)\r\n    StorageService.setItem(LOCAL_STORAGE_KEY.SETTINGS, data).then(_ => {\r\n      reset(data)\r\n    }).catch(setError).finally(_ => setLoading(false))\r\n  }\r\n\r\n  return <Modal show={show} onHide={handleClose} size='lg'>\r\n    <Modal.Header closeButton>\r\n      <Modal.Title>Settings</Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>\r\n      {loading ? <Loading className='d-flex justify-content-center m-5' />\r\n        : error ? <Alert variant='danger'><Alert.Heading>Error</Alert.Heading>{JSON.stringify(error)}</Alert> : <>\r\n          <Card className='mb-2'>\r\n            <Card.Body>\r\n              <Form.Check id='checkiFrames' name='checkiFrames' ref={register} label='Check IFrames' />\r\n              <small className='text-muted'>Check this box if you want to check xPath within iFrames also</small>\r\n            </Card.Body>\r\n          </Card>\r\n          <Card className='mb-2'>\r\n            <Card.Header>Show Notification</Card.Header>\r\n            <Card.Body>\r\n              <Row>\r\n                <Col>\r\n                  <Form.Check id='notifications.onError' name='notifications.onError' ref={register} label={<span>on <span className=\"text-danger\">Error</span> occured</span>}/>\r\n                  <Form.Check id='notifications.onAction' name='notifications.onAction' ref={register} label={<span>on <span className=\"text-success\">Action</span> completion</span>} />\r\n                  <Form.Check id='notifications.onBatch' name='notifications.onBatch' ref={register} label={<span>on <span className=\"text-success\">Batch</span> completion</span>} />\r\n                  <Form.Check id='notifications.onConfig' name='notifications.onConfig' ref={register} label={<span>on <span className=\"text-success\">Config</span> completion</span>} />\r\n                </Col>\r\n                <Col className=\"d-flex align-items-center\">\r\n                  <Form.Check id='notifications.sound' name='notifications.sound' ref={register} label={<span>Notification Sound {notificationSound ? <VolumeUp/> : <VolumeMute/>} </span>} />\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n          <Card className='mb-2'>\r\n            <Card.Body>\r\n                Extension load <Form.Check inline type='radio' name='loadType' id='loadTypeWindow' value={LOAD_TYPES.WINDOW} ref={register} label='Window' />\r\n              <Form.Check inline type='radio' name='loadType' id='loadTypeDocument' value={LOAD_TYPES.DOCUMENT} ref={register} label='Document' />\r\n              <small>\r\n                <ul className='mb-0 mt-2'>\r\n                  <li><span className='text-primary'>Window</span> (default) browser loads extension once all its content is loaded</li>\r\n                  <li><span className='text-primary'>Document</span> browser loads extension before scripts and images are loaded (faster)(unsafe)</li>\r\n                </ul>\r\n              </small>\r\n            </Card.Body>\r\n          </Card>\r\n          <Card className='mb-2'>\r\n            <Card.Body>\r\n              <Form onSubmit={handleSubmit(onSubmit)}>\r\n                <Row>\r\n                  <Col md={6} sm={12} className='mb-2 mb-md-0'>\r\n                    <InputGroup>\r\n                      <InputGroup.Prepend>\r\n                        <InputGroup.Text id='retry'>Retry</InputGroup.Text>\r\n                      </InputGroup.Prepend>\r\n                      <FormControl\r\n                        placeholder='5' aria-label='5' id='retry' name='retry' aria-describedby='retry'\r\n                        ref={register({ pattern: REGEX_NUM })}\r\n                        isInvalid={errors.retry}\r\n                      />\r\n                      <Form.Control.Feedback type='invalid'>{errors.retry && 'Only valid numbers are allowed'}</Form.Control.Feedback>\r\n                    </InputGroup>\r\n                  </Col>\r\n                  <Col md={6} sm={12}>\r\n                    <InputGroup>\r\n                      <InputGroup.Prepend>\r\n                        <InputGroup.Text id='retry-interval'>Retry Interval&nbsp;<small className='text-info'>(sec)</small></InputGroup.Text>\r\n                      </InputGroup.Prepend>\r\n                      <FormControl\r\n                        placeholder='1' aria-label='1' id='retryInterval' name='retryInterval' aria-describedby='retry-interval'\r\n                        ref={register({ validate: value => !isNaN(value) })}\r\n                        isInvalid={errors.retryInterval}\r\n                      />\r\n                      <Form.Control.Feedback type='invalid'>{errors.retryInterval && 'Only valid numbers are allowed'}</Form.Control.Feedback>\r\n                    </InputGroup>\r\n                  </Col>\r\n                  <Col xs={12}>\r\n                    <h6 className='my-2 text-secondary font-weight-light'><small>* Below are action which can be performed if xpath is not found by extension after retry</small></h6>\r\n                  </Col>\r\n                  <Col md={4} sm={12}>\r\n                    <Form.Check type='radio' name='retryOption' id='retryOptionStop' value={RETRY_OPTIONS.STOP} ref={register} label='Stop' />\r\n                  </Col>\r\n                  <Col md={4} sm={12}>\r\n                    <Form.Check type='radio' name='retryOption' id='retryOptionSkip' value={RETRY_OPTIONS.SKIP} ref={register} label='Skip Not Found' />\r\n                  </Col>\r\n                  <Col md={4} sm={12}>\r\n                    <Form.Check type='radio' name='retryOption' id='retryOptionReload' value={RETRY_OPTIONS.RELOAD} ref={register} label='Retry Refresh' />\r\n                  </Col>\r\n                </Row>\r\n                {isDirty && <div className='d-flex justify-content-end mt-2'>\r\n                  <Button type='submit' disabled={!isValid}>Save</Button>\r\n                </div>}\r\n              </Form>\r\n            </Card.Body>\r\n          </Card>\r\n        </>}\r\n    </Modal.Body>\r\n  </Modal>\r\n}\r\n\r\nSettingsModal.propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  handleClose: PropTypes.func.isRequired\r\n}\r\nexport default SettingsModal\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Navbar, Nav, Form } from 'react-bootstrap'\r\nimport { ReactComponent as GearFill } from 'bootstrap-icons/icons/gear-fill.svg'\r\nimport SettingsModal from './settings/SettingsModal'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Header = ({ name }) => {\r\n  const [showSettings, setShowSettings] = useState(false)\r\n  const [scroll, setScroll] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      setScroll(window.pageYOffset !== 0)\r\n    }\r\n\r\n    window.addEventListener('scroll', handleScroll)\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll)\r\n    }\r\n  }, [])\r\n\r\n  const handleClose = () => {\r\n    setShowSettings(false)\r\n  }\r\n\r\n  const className = `${scroll ? 'shadow' : ''}`\r\n  return <Navbar expand='lg' variant=\"light\" sticky='top' className={className}>\r\n    <Navbar.Brand className={`${name.match(/DEV/i) ? 'dev' : name.match(/BETA/i) ? 'beta' : ''}`}>\r\n      <img\r\n        src='./icon32.png'\r\n        width='30'\r\n        height='30'\r\n        className='d-inline-block align-top mr-2'\r\n        alt='Auto click Auto Fill logo'\r\n      />\r\n      {name}\r\n    </Navbar.Brand>\r\n    <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n    <Navbar.Collapse id='basic-navbar-nav'>\r\n      <Nav className=\"mr-auto\">\r\n      </Nav>\r\n      <Form inline>\r\n        <Nav className=\"mr-2\">\r\n          <Nav.Link href='https://getautoclicker.com/docs/getting-started' target='_blank'>Documentaion</Nav.Link>\r\n          <Nav.Link href='https://getautoclicker.com/blog' target='_blank'>Blog</Nav.Link>\r\n          <Nav.Link href='https://getautoclicker.com/examples/getautoclicker.com' target='_blank'>Examples</Nav.Link>\r\n        </Nav>\r\n        <GearFill width='24' height='24' onClick={() => setShowSettings(true)} />\r\n        <SettingsModal show={showSettings} handleClose={handleClose} />\r\n      </Form>\r\n    </Navbar.Collapse>\r\n  </Navbar>\r\n}\r\nHeader.propTypes = {\r\n  name: PropTypes.string.isRequired\r\n}\r\nexport default Header\r\n","import React from 'react'\r\nimport { Navbar, Nav } from 'react-bootstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Footer = ({ version }) => {\r\n  return <Navbar expand='lg' sticky='bottom'>\r\n    <Nav className='mr-auto'>\r\n      <Nav.Link href='mailto:dhruv.techapps@gmail.com' active>dhruv.techapps@gmail.com</Nav.Link>\r\n      <Nav.Link href='https://github.com/Dhruv-Techapps/auto-click-auto-fill/issues' target='_blank'>Issues</Nav.Link>\r\n      <Nav.Link href='https://getautoclicker.com/test' target='_blank'>Test</Nav.Link>\r\n      <Nav.Link>v{version}</Nav.Link>\r\n    </Nav>\r\n  </Navbar>\r\n}\r\nFooter.propTypes = {\r\n  version: PropTypes.string.isRequired\r\n}\r\nexport default Footer\r\n","import React, { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Button, Card, Col, Form, FormControl, InputGroup, Row } from 'react-bootstrap'\r\nimport { useForm } from 'react-hook-form'\r\nimport { REGEX_NUM } from '../../util/regex'\r\nimport { numberWithExponential } from '../../util/prop-types'\r\nimport { convertNumberField } from '../../util/validation'\r\nconst NUMBER_FIELDS = ['repeat', 'repeatInterval']\r\nconst BatchBody = ({ batch, configIndex, setConfigs }) => {\r\n  const { register, handleSubmit, errors, reset, formState: { isDirty, isValid } } = useForm({\r\n    mode: 'onBlur',\r\n    reValidateMode: 'onChange',\r\n    defaultValues: batch,\r\n    shouldFocusError: true\r\n  })\r\n\r\n  useEffect(() => {\r\n    reset(batch)\r\n  }, [batch, reset])\r\n\r\n  const onSubmit = data => {\r\n    convertNumberField(data, NUMBER_FIELDS)\r\n    reset(data)\r\n    setConfigs(configs => configs.map((config, index) => {\r\n      if (index === configIndex) {\r\n        config.batch = { ...config.batch, ...data }\r\n        return config\r\n      }\r\n      return config\r\n    }))\r\n  }\r\n\r\n  return <Form onSubmit={handleSubmit(onSubmit)}>\r\n    <Card.Body>\r\n      <Row>\r\n        <Col md='6' sm='12'>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id='batch-repeat'>repeat</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              name='repeat'\r\n              ref={register({ pattern: REGEX_NUM })}\r\n              isInvalid={!!errors.repeat}\r\n              placeholder='0'\r\n              aria-label='0'\r\n              aria-describedby='batch-repeat'\r\n            />\r\n            <Form.Control.Feedback type='invalid'>{errors.repeat && 'Only valid numbers are allowed'}</Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id='batch-repeat-interval'>R-Interval&nbsp;<small className='text-info'>(sec)</small></InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              name='repeatInterval'\r\n              ref={register({ validate: value => !isNaN(value) })}\r\n              isInvalid={!!errors.repeatInterval}\r\n              placeholder='0'\r\n              aria-label='0'\r\n              aria-describedby='batch-repeat-interval'\r\n            />\r\n            <Form.Control.Feedback type='invalid'>{errors.repeatInterval && 'Only valid numbers are allowed'}</Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Col>\r\n      </Row>\r\n      {isDirty && <div className='d-flex justify-content-end mt-2'>\r\n        <Button type='submit' disabled={!isValid}>Save</Button>\r\n      </div>}\r\n    </Card.Body>\r\n  </Form>\r\n}\r\nBatchBody.propTypes = {\r\n  batch: PropTypes.shape({\r\n    repeat: PropTypes.number,\r\n    repeatInterval: numberWithExponential\r\n  }),\r\n  configIndex: PropTypes.number.isRequired,\r\n  setConfigs: PropTypes.func.isRequired\r\n}\r\nexport default BatchBody\r\n","import React from 'react'\r\nimport { Card, Row, Col, Form } from 'react-bootstrap'\r\nimport { ElementUtil } from '@dhruv-techapps/core-common'\r\nimport PropTypes from 'prop-types'\r\nimport BatchBody from './batch-body'\r\nimport { numberWithExponential } from '../../util/prop-types'\r\n\r\nconst Batch = ({ batch, configIndex, setConfigs }) => {\r\n  const onChange = (e) => {\r\n    const { name, value } = ElementUtil.getNameValue(e.currentTarget)\r\n    setConfigs(configs => configs.map((config, index) => {\r\n      if (index === configIndex) {\r\n        config.batch = { ...config.batch, [name]: value }\r\n        return config\r\n      }\r\n      return config\r\n    }))\r\n  }\r\n\r\n  return <Card className='mb-3'>\r\n    <Card.Header as='h5'>\r\n      <Row>\r\n        <Col>\r\n          <a target='_blank' rel='noopener noreferrer' href='https://getautoclicker.com/docs/batch'>Batch</a>\r\n        </Col>\r\n        <Col md='auto'>\r\n          <Form.Check\r\n            type='switch'\r\n            id='batch-refresh'\r\n            label='Refresh'\r\n            name='refresh'\r\n            checked={batch.refresh}\r\n            onChange={onChange}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    {!batch.refresh && <BatchBody batch={batch} configIndex={configIndex} setConfigs={setConfigs} />}\r\n  </Card>\r\n}\r\n\r\nBatch.propTypes = {\r\n  batch: PropTypes.shape({\r\n    refresh: PropTypes.bool.isRequired,\r\n    repeat: PropTypes.number,\r\n    repeatInterval: numberWithExponential\r\n  }),\r\n  configIndex: PropTypes.number.isRequired,\r\n  setConfigs: PropTypes.func.isRequired\r\n}\r\nexport default React.memo(Batch)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// The forwardRef is important!!\r\n// Dropdown needs access to the DOM node in order to position the Menu\r\nexport const DropdownToggle = React.forwardRef(({ children, onClick }, ref) => {\r\n  const DropdownToggleOnclick = (e) => {\r\n    e.preventDefault()\r\n    onClick(e)\r\n  }\r\n\r\n  return <button type='button' className='btn p-1' data-toggle='dropdown' ref={ref} onClick={DropdownToggleOnclick}>{children}</button>\r\n})\r\nDropdownToggle.displayName = 'ParDropdownToggleagraph'\r\nDropdownToggle.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n  onClick: PropTypes.func.isRequired\r\n}\r\n","import React, { useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Form } from 'react-bootstrap'\r\n\r\n// Create an editable cell renderer\r\nexport const EditableCell = ({ value: initialValue, data, row: { index }, column: { id, required, pattern, validate, dataType }, updateAction }) => {\r\n  // We need to keep and update the state of the cell normally\r\n// We need to keep and update the state of the cell normally\r\n  const [value, setValue] = React.useState(initialValue)\r\n  const [invalid, setInvalid] = React.useState(data[index].error === id)\r\n  const input = useRef()\r\n  const onChange = (e) => {\r\n    input.current.classList.remove('is-valid')\r\n    setInvalid(false)\r\n    const { value } = e.currentTarget\r\n    if (value) {\r\n      if (pattern && !pattern.test(value)) {\r\n        setInvalid(true)\r\n      }\r\n      if (validate && !validate(value)) {\r\n        setInvalid(true)\r\n      }\r\n    } else if (required) {\r\n      setInvalid(true)\r\n    }\r\n    setValue(value)\r\n  }\r\n\r\n  // We'll only update the external data when the input is blurred\r\n  const onBlur = (e) => {\r\n    const { value } = e.currentTarget\r\n    updateAction(index, id, dataType === 'number' && value.indexOf('e') === -1 ? Number(value) : value)\r\n  }\r\n\r\n  // If the initialValue is changed external, sync it up with our state\r\n  React.useEffect(() => {\r\n    setValue(initialValue)\r\n  }, [initialValue])\r\n\r\n  return <Form.Control ref={input} value={value} name={id} onChange={onChange} onBlur={onBlur} isInvalid={invalid} />\r\n}\r\n\r\nEditableCell.propTypes = {\r\n  data: PropTypes.array,\r\n  value: PropTypes.PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  row: PropTypes.shape({\r\n    index: PropTypes.number.isRequired\r\n  }),\r\n  column: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    required: PropTypes.bool,\r\n    pattern: PropTypes.instanceOf(RegExp),\r\n    validate: PropTypes.func,\r\n    dataType: PropTypes.string\r\n  }),\r\n  updateAction: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\nimport { OverlayTrigger, Popover } from 'react-bootstrap'\r\nimport { ReactComponent as InfoCircle } from 'bootstrap-icons/icons/info-circle.svg'\r\n\r\nexport const ValueExtractorPopover = () => <OverlayTrigger trigger=\"click\" placement=\"right\" rootClose overlay={<Popover id=\"popover-basic\">\r\n  <Popover.Title>Examples</Popover.Title>\r\n  <Popover.Content>\r\n    <ul>\r\n      <li><code>\\d+.\\d*</code> float number extract $<span className=\"text-success\">123.00</span> only</li>\r\n      <li><code>\\d+</code> number extract $<span className=\"text-success\">123</span>.00 only</li>\r\n      <li>supports regex pattern</li>\r\n    </ul>\r\n  </Popover.Content>\r\n</Popover>}><InfoCircle className=\"ml-2 text-info\"/></OverlayTrigger>\r\n","import React, { forwardRef, useImperativeHandle, useRef, useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport { Modal, Form, Row, Col, Button, Alert, Card, InputGroup, FormControl } from 'react-bootstrap'\r\nimport { ADDON_CONDITIONS, defaultAddon } from '@dhruv-techapps/acf-common'\r\nimport { useForm } from 'react-hook-form'\r\nimport { REGEX_NUM } from '../../util/regex'\r\nimport { ValueExtractorPopover } from '../../popover/value-extractor.popover'\r\nimport { convertNumberField } from '../../util/validation'\r\n\r\nconst NUMBER_FIELDS = ['retry', 'retryInterval']\r\n\r\nconst AddonModal = forwardRef(({ configIndex, setConfigs }, ref) => {\r\n  const { register, handleSubmit, errors, reset, formState: { isDirty } } = useForm({\r\n    mode: 'onBlur',\r\n    reValidateMode: 'onChange',\r\n    defaultValues: { ...defaultAddon },\r\n    shouldFocusError: true\r\n  })\r\n  const [show, setShow] = useState(false)\r\n  const actionIndex = useRef(-1)\r\n\r\n  const onSubmit = data => {\r\n    convertNumberField(data, NUMBER_FIELDS)\r\n    reset(data)\r\n    setConfigs(configs => configs.map((config, index) => {\r\n      if (index === configIndex) {\r\n        config.actions[actionIndex.current].addon = { ...data }\r\n        return { ...config }\r\n      }\r\n      return config\r\n    }))\r\n    setShow(false)\r\n  }\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    showAddon (index, addon) {\r\n      actionIndex.current = index\r\n      reset({ ...addon })\r\n      setShow(true)\r\n    }\r\n  }))\r\n\r\n  const handleClose = () => { setShow(false) }\r\n\r\n  return <Modal show={show} size='lg' onHide={handleClose}>\r\n    <Form onSubmit={handleSubmit(onSubmit)}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Addon</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Alert variant=\"info\">Add condition will be checked before executing Action</Alert>\r\n        <Card>\r\n          <Card.Body>\r\n            <Row className=\"mb-2\">\r\n              <Col>\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text id='addon-element'>Element Finder <small className=\"text-danger\">*</small></InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <Form.Control type='text' placeholder='Element Finder' aria-label='Element Finder' aria-describedby='addon-element' name='elementFinder' ref={register({ required: true })} isInvalid={!!errors.element} />\r\n                  <Form.Control.Feedback type='invalid'>{errors.element && 'Element is required'}</Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Col>\r\n              <Col>\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text id='addon-condition'>Condition <small className=\"text-danger\">*</small></InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <Form.Control as='select' aria-describedby='addon-condition' custom ref={register({ required: true })} isInvalid={!!errors.condition} name='condition'>\r\n                    {Object.entries(ADDON_CONDITIONS).map((condition, index) => <option key={index} value={condition[1]}>{condition[0]}</option>)}\r\n                  </Form.Control>\r\n                  <Form.Control.Feedback type='invalid'>{errors.condition && 'Condition is required'}</Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text id='addon-value'>Value <small className=\"text-danger\">*</small></InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <Form.Control type='text' placeholder='Value' aria-label='Value' aria-describedby='addon-value' ref={register({ required: true })} isInvalid={!!errors.value} name='value' />\r\n                  <Form.Control.Feedback type='invalid'>{errors.value && 'Value is required'}</Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Col>\r\n              <Col>\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text id='addon-value-extractor'>Value Extractor&nbsp;<ValueExtractorPopover/></InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <Form.Control type='text' placeholder='Value Extractor' aria-label='Value Extractor' name='valueExtractor' aria-describedby='addon-value-extractor' ref={register()} isInvalid={!!errors.valueExtractor} />\r\n                  <Form.Control.Feedback type='invalid'>{errors.valueExtractor && 'Not a valid regex'}</Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Col>\r\n            </Row>\r\n            <hr/>\r\n            <Row>\r\n              <Col>\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text id='addon-retry'>Retry</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <FormControl\r\n                    placeholder='0' aria-label='0' name='retry' aria-describedby='addon-retry'\r\n                    ref={register({ pattern: REGEX_NUM })}\r\n                    isInvalid={errors.retry}\r\n                  />\r\n                  <Form.Control.Feedback type='invalid'>{errors.retry && 'Only valid numbers are allowed'}</Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Col>\r\n              <Col >\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text id='addon-retry-interval'>Retry Interval&nbsp;<small className='text-info'>(sec)</small></InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <FormControl\r\n                    placeholder='0' aria-label='0' id='addon-retryInterval' name='retryInterval' aria-describedby='retry-interval'\r\n                    ref={register({ validate: value => !isNaN(value) })}\r\n                    isInvalid={errors.retryInterval}\r\n                  />\r\n                  <Form.Control.Feedback type='invalid'>{errors.retryInterval && 'Only valid numbers are allowed'}</Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Modal.Body>\r\n      {isDirty && <Modal.Footer>\r\n        <Button type='submit'>Save</Button>\r\n      </Modal.Footer>}\r\n    </Form>\r\n  </Modal>\r\n})\r\n\r\nAddonModal.propTypes = {\r\n  configIndex: PropTypes.number.isRequired,\r\n  setConfigs: PropTypes.func.isRequired\r\n}\r\nexport default React.memo(AddonModal)\r\n","import React, { forwardRef, useImperativeHandle, useRef, useState } from 'react'\r\nimport { Button, Modal } from 'react-bootstrap'\r\nconst ConfirmModel = forwardRef((props, ref) => {\r\n  const [show, setShow] = useState(false)\r\n  const confirm = useRef({})\r\n  useImperativeHandle(ref, () => ({\r\n    confirm (confirmProps) {\r\n      confirm.current = confirmProps\r\n      setShow(true)\r\n    }\r\n  }))\r\n\r\n  const noClick = () => {\r\n    setShow(false)\r\n  }\r\n\r\n  const yesClick = () => {\r\n    confirm.current.confirmFunc()\r\n    setShow(false)\r\n  }\r\n\r\n  return <Modal show={show} centered backdrop='static' keyboard={false}>\r\n    <Modal.Body className='mx-auto text-center'>\r\n      <h4 className='my-3'>{confirm.current.title || 'Confirm'}</h4>\r\n      {confirm.current.message}\r\n    </Modal.Body>\r\n    <Modal.Footer>\r\n      <Button variant='secondary' className='px-3 mr-3' size='md' onClick={noClick}>No</Button>\r\n      <Button variant='primary' className='px-3' size='md' onClick={yesClick}>Yes</Button>\r\n    </Modal.Footer>\r\n  </Modal>\r\n})\r\nexport default ConfirmModel\r\n","import React from 'react'\r\nimport { OverlayTrigger, Popover, Table } from 'react-bootstrap'\r\nimport { ReactComponent as InfoCircle } from 'bootstrap-icons/icons/info-circle.svg'\r\n\r\nexport const ElementFinderPopover = () => <OverlayTrigger trigger=\"click\" rootClose placement=\"right\" overlay={<Popover id=\"popover-basic\" >\r\n  <Popover.Content>\r\n  &lt;input type=&quot;password&quot; name=&quot;login&quot; id=&quot;username&quot; class=&quot;form-control test&quot; readonly disabled&gt;\r\n    <Table bordered striped className=\"mt-3\">\r\n      <thead>\r\n        <tr>\r\n          <th>getElementBy</th>\r\n          <th>Element Finder</th>\r\n          <th># of elements</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById\" target=\"_blank\" rel=\"noopener noreferrer\">getElementById</a></td>\r\n          <td>\r\n            <code>#username</code><br/>\r\n            <code>Id::username</code>\r\n          </td>\r\n          <td>1</td>\r\n        </tr>\r\n        <tr>\r\n          <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName\" target=\"_blank\" rel=\"noopener noreferrer\">getElementsByClassName</a></td>\r\n          <td>\r\n            <code>ClassName::form-control test</code>\r\n          </td>\r\n          <td>&gt;1</td>\r\n        </tr>\r\n        <tr>\r\n          <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByName\" target=\"_blank\" rel=\"noopener noreferrer\">getElementsByName</a></td>\r\n          <td><code>Name::login</code></td>\r\n          <td>&gt;1</td>\r\n        </tr>\r\n        <tr>\r\n          <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName\" target=\"_blank\" rel=\"noopener noreferrer\">getElementsByTagName</a></td>\r\n          <td><code>TagName::input</code></td>\r\n          <td>&gt;1</td>\r\n        </tr>\r\n        <tr>\r\n          <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\" target=\"_blank\" rel=\"noopener noreferrer\">querySelector</a></td>\r\n          <td>\r\n            <code>Selector::input</code><br/>\r\n            <code>Selector::input[type]</code><br/>\r\n            <code>Selector::input[disabled]</code><br/>\r\n            <code>Selector::input[type=&apos;password&apos;]</code><br/>\r\n            <code>Selector::input[name=&apos;login&apos;]</code><br/>\r\n            <code>Selector::input#username</code><br/>\r\n            <code>Selector::input.form-control.test</code><br/>\r\n          </td>\r\n          <td>1</td>\r\n        </tr>\r\n        <tr>\r\n          <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\" target=\"_blank\" rel=\"noopener noreferrer\">querySelectorAll</a></td>\r\n          <td><code>SelectorAll::input</code></td>\r\n          <td>&gt;1</td>\r\n        </tr>\r\n        <tr>\r\n          <td><a href=\"https://getautoclicker.com/docs/xpath\" target=\"_blank\" rel=\"noopener noreferrer\">XPath</a></td>\r\n          <td><code>&#47;&#47;input[contains(@class,&apos;test&apos;)]</code></td>\r\n          <td>&gt;1</td>\r\n        </tr>\r\n      </tbody>\r\n    </Table></Popover.Content>\r\n</Popover>}><InfoCircle className=\"ml-2 text-info\"/></OverlayTrigger>\r\n","import React from 'react'\r\nimport { OverlayTrigger, Popover, Table } from 'react-bootstrap'\r\nimport { ReactComponent as InfoCircle } from 'bootstrap-icons/icons/info-circle.svg'\r\n\r\nexport const ValuePopover = () => <OverlayTrigger trigger=\"click\" placement=\"right\" rootClose overlay={<Popover id=\"popover-basic\" >\r\n  <Popover.Content>\r\n    <Table bordered striped className=\"mt-3\">\r\n      <tbody>\r\n        <tr>\r\n          <td><a href=\"https://getautoclicker.com/docs/action#scroll-to-examples\" target=\"_blank\" rel=\"noopener noreferrer\">Scroll To</a></td>\r\n          <td><code>ScrollTo::Bottom</code></td>\r\n        </tr>\r\n        <tr>\r\n          <td><a href=\"https://getautoclicker.com/docs/action#click-events-examples\" target=\"_blank\" rel=\"noopener noreferrer\">Click Events</a></td>\r\n          <td><code>ClickEvents::dblclick</code></td>\r\n        </tr>\r\n        <tr>\r\n          <td><a href=\"https://getautoclicker.com/docs/action#form-events-examples\" target=\"_blank\" rel=\"noopener noreferrer\">Form Events</a></td>\r\n          <td><code>FormEvents::submit</code></td>\r\n        </tr>\r\n        <tr>\r\n          <td><a href=\"https://getautoclicker.com/docs/action#exec-command-examples\" target=\"_blank\" rel=\"noopener noreferrer\">Exec Command</a></td>\r\n          <td><code>ExecCommand::[&quot;cut&quot;,&quot;paste&quot;]</code></td>\r\n        </tr>\r\n        <tr>\r\n          <td><a href=\"https://getautoclicker.com/docs/action#location-command-examples\" target=\"_blank\" rel=\"noopener noreferrer\">Location Command</a></td>\r\n          <td><code>LocationCommand::href::https://getautoclicker.com</code></td>\r\n        </tr>\r\n        <tr>\r\n          <td>Plain text</td>\r\n          <td><code>Hello World</code></td>\r\n        </tr>\r\n      </tbody>\r\n    </Table>\r\n  </Popover.Content>\r\n</Popover>}><InfoCircle className=\"ml-2 text-info\"/></OverlayTrigger>\r\n","import React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './action-table.scss'\r\n\r\nimport { useTable } from 'react-table'\r\nimport { Button, Form, Table } from 'react-bootstrap'\r\n\r\nimport { ReactComponent as XCircle } from 'bootstrap-icons/icons/x-circle.svg'\r\nimport { ReactComponent as CodeSlash } from 'bootstrap-icons/icons/code-slash.svg'\r\nimport { ReactComponent as CaretUp } from 'bootstrap-icons/icons/caret-up.svg'\r\nimport { ReactComponent as CaretDown } from 'bootstrap-icons/icons/caret-down.svg'\r\n\r\nimport { EditableCell } from './editable-cell'\r\nimport AddonModal from './addon'\r\nimport { REGEX_NUM } from '../../util/regex'\r\nimport ConfirmModel from '../../components/ConfirmModal'\r\nimport { ElementFinderPopover } from '../../popover/element-finder.popover'\r\nimport { ValuePopover } from '../../popover/value.popover'\r\nimport { numberWithExponential } from '../../util/prop-types'\r\nimport { defaultAction } from '@dhruv-techapps/acf-common'\r\n\r\nconst ActionTable = forwardRef(({ actions, configIndex, setConfigs, hiddenColumns, addonRef, toastRef }, ref) => {\r\n  const [data, setData] = useState(actions)\r\n  const [error, setError] = useState()\r\n  const confirmRef = useRef()\r\n  const didMountRef = useRef(true)\r\n  const didUpdateRef = useRef(false)\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    addAction () {\r\n      setData([...data, { ...defaultAction, focus: true }])\r\n      didUpdateRef.current = true\r\n    }\r\n  }))\r\n\r\n  useEffect(() => {\r\n    if (didMountRef.current) {\r\n      didMountRef.current = false\r\n      return\r\n    }\r\n    setData(actions)\r\n  }, [actions])\r\n\r\n  // Set our editable cell renderer as the default Cell renderer\r\n  const defaultColumn = {\r\n    Cell: EditableCell\r\n  }\r\n\r\n  const columns = React.useMemo(() => [\r\n    {\r\n      Header: 'Init Wait',\r\n      style: { width: '90px' },\r\n      accessor: 'initWait',\r\n      dataType: 'number',\r\n      validate: value => !isNaN(value)\r\n    }, {\r\n      Header: 'Name',\r\n      style: { width: '90px' },\r\n      accessor: 'name'\r\n    }, {\r\n      Header: 'Element Finder',\r\n      accessor: 'elementFinder',\r\n      required: true\r\n    }, {\r\n      Header: 'Value',\r\n      accessor: 'value'\r\n    }, {\r\n      Header: 'Repeat',\r\n      style: { width: '90px' },\r\n      accessor: 'repeat',\r\n      dataType: 'number',\r\n      pattern: REGEX_NUM\r\n    }, {\r\n      Header: 'R-Interval',\r\n      style: { width: '100px' },\r\n      accessor: 'repeatInterval',\r\n      dataType: 'number',\r\n      validate: value => !isNaN(value)\r\n    }\r\n  ], [])\r\n\r\n  const initialState = { hiddenColumns }\r\n\r\n  const updateAction = (rowIndex, columnId, value) => {\r\n    setData(actions => actions.map((action, index) => {\r\n      if (index === rowIndex) {\r\n        return { ...action, [columnId]: value }\r\n      }\r\n      return action\r\n    }))\r\n    didUpdateRef.current = true\r\n  }\r\n\r\n  const removeAction = (rowIndex) => {\r\n    setData(actions => actions.filter((_action, index) => index !== rowIndex))\r\n    didUpdateRef.current = true\r\n  }\r\n\r\n  const saveActions = (e) => {\r\n    e.preventDefault()\r\n    setError()\r\n    if (_validateActions()) {\r\n      setConfigs(configs => configs.map((config, index) => {\r\n        if (index === configIndex) {\r\n          config.actions = [...data]\r\n          return config\r\n        }\r\n        return config\r\n      }))\r\n      didUpdateRef.current = false\r\n      toastRef.current.push({\r\n        body: <p><span className=\"badge badge-success\">actions</span> saved successfully !</p>,\r\n        header: <strong className='mr-auto'>Actions</strong>\r\n      })\r\n    } else {\r\n      setError('Element Finder cant be empty')\r\n    }\r\n  }\r\n\r\n  const _validateActions = () => {\r\n    let isValid = true\r\n    data.forEach((action, index) => {\r\n      document.querySelector(`#actions tbody tr:nth-child(${index + 1}) input[name=elementFinder]`).classList.remove('is-invalid')\r\n      if (!action.elementFinder) {\r\n        document.querySelector(`#actions tbody tr:nth-child(${index + 1}) input[name=elementFinder]`).classList.add('is-invalid')\r\n        isValid = false\r\n      }\r\n    })\r\n    return isValid\r\n  }\r\n\r\n  const removeActionConfirm = (rowIndex) => {\r\n    const name = `#${+rowIndex + 1} - ${data[rowIndex].name || data[rowIndex].elementFinder || 'row'}`\r\n    confirmRef.current.confirm({\r\n      title: 'Remove Action',\r\n      message: <p>Are you sure to remove <span className='codecode-danger'>{name}</span> Action?</p>,\r\n      confirmFunc: removeAction.bind(null, Number(rowIndex))\r\n    })\r\n  }\r\n\r\n  const tableInstance = useTable({ columns, data, defaultColumn, initialState, updateAction })\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setHiddenColumns } = tableInstance\r\n\r\n  useEffect(() => {\r\n    if (didMountRef.current) {\r\n      didMountRef.current = false\r\n      return\r\n    }\r\n    setHiddenColumns(hiddenColumns)\r\n  }, [hiddenColumns, setHiddenColumns])\r\n\r\n  const showAddon = (row) => {\r\n    addonRef.current.showAddon(row.id, row.original.addon)\r\n  }\r\n\r\n  const _arrayMove = (arr, oldIndex, newIndex) => {\r\n    if (newIndex >= arr.length) {\r\n      var k = newIndex - arr.length + 1\r\n      while (k--) {\r\n        arr.push(undefined)\r\n      }\r\n    }\r\n    arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0])\r\n    return arr // for testing\r\n  }\r\n\r\n  const moveUp = (e, rowId) => {\r\n    if (e.currentTarget.getAttribute('disabled') === null) {\r\n      setData(actions => [..._arrayMove(actions, +rowId, rowId - 1)])\r\n      didUpdateRef.current = true\r\n    }\r\n  }\r\n  const moveDown = (e, rowId) => {\r\n    if (e.currentTarget.getAttribute('disabled') === null) {\r\n      setData(actions => [..._arrayMove(actions, +rowId, +rowId + 1)])\r\n      didUpdateRef.current = true\r\n    }\r\n  }\r\n  return <Form onSubmit={saveActions}>\r\n    <Table hover {...getTableProps()} id='actions' borderless>\r\n      <thead>\r\n        {headerGroups.map((headerGroup, index) => (\r\n          <tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n            <th style={{ width: '30px' }} />\r\n            {headerGroup.headers.map((column, index) => (\r\n              <th {...column.getHeaderProps([{ style: column.style }])} key={index}>\r\n                {column.render('Header')} {column.required && <small className=\"text-danger\">*</small>}\r\n                {column.Header === 'Element Finder' && <ElementFinderPopover/>}\r\n                {column.Header === 'Value' && <ValuePopover/>}\r\n              </th>\r\n            ))}\r\n            <th style={{ width: '80px' }} />\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, index) => {\r\n          prepareRow(row)\r\n          return (<tr {...row.getRowProps()} key={index}>\r\n            <td align='center'>\r\n              <div className='d-flex flex-column align-items-center'>\r\n                <CaretUp width='20' height='20' onClick={(e) => moveUp(e, row.id)} disabled={index === 0}/>\r\n                <CaretDown width='20' height='20' onClick={(e) => moveDown(e, row.id)} disabled={index === rows.length - 1}/>\r\n              </div>\r\n            </td>\r\n            {row.cells.map((cell, index) => (\r\n              <td {...cell.getCellProps()} key={index}>\r\n                {cell.render('Cell')}\r\n              </td>\r\n            ))}\r\n            <td align='center'>\r\n              <CodeSlash className='text-primary mr-3' width='20' height='20' onClick={() => showAddon(row)} />\r\n              <Button variant='link' className='p-0' onClick={() => { removeActionConfirm(row.id) }} disabled={data.length === 1}>\r\n                <XCircle className={'x-circle ' + (data.length === 1 ? 'text-muted' : 'text-danger')} width='20' height='20' />\r\n              </Button>\r\n            </td>\r\n          </tr>)\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n    {didUpdateRef.current && <div className='d-flex justify-content-end align-items-center mt-2'>\r\n      <span className=\"text-danger mr-3\">{error}</span>\r\n      <Button type='submit'>Save</Button>\r\n    </div>}\r\n    <ConfirmModel ref={confirmRef} />\r\n  </Form>\r\n})\r\n\r\nActionTable.propTypes = {\r\n  actions: PropTypes.arrayOf(PropTypes.shape({\r\n    elementFinder: PropTypes.string.isRequired,\r\n    initWait: PropTypes.number,\r\n    name: PropTypes.string,\r\n    value: PropTypes.string,\r\n    repeat: PropTypes.number,\r\n    repeatInterval: numberWithExponential,\r\n    addon: AddonModal.type.propTypes.addon\r\n  }).isRequired).isRequired,\r\n  didUpdateRef: PropTypes.shape({\r\n    current: PropTypes.bool\r\n  }),\r\n  toastRef: PropTypes.shape({ current: PropTypes.shape({ push: PropTypes.func.isRequired }) }).isRequired,\r\n  addonRef: PropTypes.shape({ current: PropTypes.shape({ showAddon: PropTypes.func.isRequired }) }).isRequired,\r\n  configIndex: PropTypes.number.isRequired,\r\n  setConfigs: PropTypes.func.isRequired,\r\n  hiddenColumns: PropTypes.arrayOf(PropTypes.string)\r\n}\r\nexport default ActionTable\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { Card, Row, Col, Dropdown, Button } from 'react-bootstrap'\r\nimport { ReactComponent as FilterRight } from 'bootstrap-icons/icons/filter-right.svg'\r\nimport { DropdownToggle } from '../../components/DropdownToggle'\r\nimport { LocalStorage } from '@dhruv-techapps/core-common'\r\nimport ActionTable from './action-table.js'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst HIDDEN_COLUMN_KEY = 'hiddenColumns'\r\nconst defaultHiddenColumns = ['name', 'initWait', 'repeat', 'repeatInterval']\r\n\r\nconst Action = ({ actions, configIndex, setConfigs, addonRef, toastRef }) => {\r\n  const [hiddenColumns, setHiddenColumns] = useState(LocalStorage.getItem(HIDDEN_COLUMN_KEY, defaultHiddenColumns))\r\n  const actionTableRef = useRef()\r\n  const didMountRef = useRef(true)\r\n\r\n  const onColumnChange = (e) => {\r\n    const column = e.currentTarget.getAttribute('data-column')\r\n    const index = hiddenColumns.indexOf(column)\r\n    setHiddenColumns(hiddenColumns => index !== -1 ? hiddenColumns.filter((_column, _index) => _index !== index) : [...hiddenColumns, column])\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (didMountRef.current) {\r\n      didMountRef.current = false\r\n      return\r\n    }\r\n    LocalStorage.setItem(HIDDEN_COLUMN_KEY, hiddenColumns)\r\n  }, [hiddenColumns])\r\n\r\n  return <Card>\r\n    <Card.Header as='h5'>\r\n      <Row>\r\n        <Col className='d-flex align-items-center'>\r\n          <a target='_blank' rel='noopener noreferrer' href='https://getautoclicker.com/docs/action'>Action</a>\r\n        </Col>\r\n        <Col md='auto' className='d-flex align-items-center'>\r\n          <Button variant='success' onClick={() => { actionTableRef.current.addAction() }}>Add Action</Button>\r\n          <Dropdown alignRight className='ml-2'>\r\n            <Dropdown.Toggle as={DropdownToggle}>\r\n              <FilterRight width='28' height='28' />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={onColumnChange} data-column='name' active={hiddenColumns.indexOf('name') === -1}>Name</Dropdown.Item>\r\n              <Dropdown.Item onClick={onColumnChange} data-column='initWait' active={hiddenColumns.indexOf('initWait') === -1}>Init Wait</Dropdown.Item>\r\n              <Dropdown.Item onClick={onColumnChange} data-column='repeat' active={hiddenColumns.indexOf('repeat') === -1}>Repeat</Dropdown.Item>\r\n              <Dropdown.Item onClick={onColumnChange} data-column='repeatInterval' active={hiddenColumns.indexOf('repeatInterval') === -1}>R-interval</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <ActionTable ref={actionTableRef} toastRef={toastRef} actions={actions} configIndex={configIndex} setConfigs={setConfigs} hiddenColumns={hiddenColumns} addonRef={addonRef} />\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nAction.propTypes = {\r\n  actions: ActionTable.propTypes.actions,\r\n  configIndex: PropTypes.number.isRequired,\r\n  setConfigs: PropTypes.func.isRequired,\r\n  addonRef: ActionTable.propTypes.addonRef,\r\n  toastRef: ActionTable.propTypes.toastRef\r\n}\r\nexport default React.memo(Action)\r\n","import React from 'react'\r\nimport { OverlayTrigger, Popover } from 'react-bootstrap'\r\nimport { ReactComponent as InfoCircle } from 'bootstrap-icons/icons/info-circle.svg'\r\n\r\nexport const StartTimePopover = () => <OverlayTrigger trigger=\"click\" placement=\"right\" rootClose overlay={<Popover id=\"popover-basic\">\r\n  <Popover.Title>Examples</Popover.Title>\r\n  <Popover.Content>\r\n    <ul>\r\n      <li><code>13:00:00:00</code> at afternoon 1 PM</li>\r\n      <li><code>00:00:00:00</code> at midnight 12 AM</li>\r\n      <li><code>15:15:15:15</code> at afternoon 3 PM and 15 mins and 15 seconds and 15 milliseconds</li>\r\n      <li><code>empty blank</code> start immediately</li>\r\n    </ul>\r\n  </Popover.Content>\r\n</Popover>}><InfoCircle className=\"ml-2 text-info\"/></OverlayTrigger>\r\n","import React, { useEffect, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Button, Card, Col, Form, FormControl, InputGroup, Row } from 'react-bootstrap'\r\nimport { useForm } from 'react-hook-form'\r\nimport { REGEX_START_TIME } from '../../util/regex'\r\nimport { StartTimePopover } from '../../popover/start-time.popover'\r\nimport { numberWithExponential } from '../../util/prop-types'\r\nimport { convertNumberField } from '../../util/validation'\r\nconst NUMBER_FIELDS = ['initWait']\r\nconst ConfigBody = ({ config, configIndex, setConfigs }) => {\r\n  const didMountRef = useRef(true)\r\n  const { register, handleSubmit, errors, reset, formState: { isDirty, isValid } } = useForm({\r\n    mode: 'onBlur',\r\n    reValidateMode: 'onChange',\r\n    defaultValues: config,\r\n    shouldFocusError: true\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (didMountRef.current) {\r\n      didMountRef.current = false\r\n      return\r\n    }\r\n    reset(config)\r\n  }, [config, reset])\r\n\r\n  const onSubmit = data => {\r\n    convertNumberField(data, NUMBER_FIELDS)\r\n    reset(data)\r\n    setConfigs(configs => configs.map((config, index) => {\r\n      if (index === configIndex) {\r\n        return { ...config, ...data }\r\n      }\r\n      return config\r\n    }))\r\n  }\r\n\r\n  return <Form onSubmit={handleSubmit(onSubmit)}>\r\n    <Card.Body>\r\n      <Row>\r\n        <Col md='5' sm='12'>\r\n          <InputGroup className='mb-2'>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id='config-name'>Name</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl name='name' ref={register} placeholder='getautoclicker.com' aria-label='getautoclicker.com' aria-describedby='config-name' />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col md='7' sm='12'>\r\n          <InputGroup className='mb-2'>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id='config-url'>URL&nbsp;<small className='text-danger'>*</small></InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              name='url' ref={register({ required: true })}\r\n              isInvalid={!!errors.url}\r\n              placeholder='https://getautoclicker.com/' aria-label='https://getautoclicker.com/' aria-describedby='config-url'\r\n            />\r\n            <Form.Control.Feedback type='invalid'>{errors.url && 'URL is required'}</Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Col>\r\n        <Col md='5' sm='12'>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id='config-init-wait'>Init Wait&nbsp;<small className='text-info'>(sec)</small></InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              ref={register({ validate: value => !isNaN(value) })}\r\n              isInvalid={!!errors.initWait} name='initWait' placeholder='0' aria-label='0' aria-describedby='config-init-wait'\r\n            />\r\n            <Form.Control.Feedback type='invalid'>{errors.initWait && 'Only valid numbers are allowed'}</Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Col>\r\n        <Col md='7' sm='12'>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id='config-start-time'>Start Time&nbsp;<StartTimePopover/></InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              ref={register({ pattern: REGEX_START_TIME })}\r\n              isInvalid={!!errors.startTime}\r\n              name='startTime' placeholder='hh:mm:ss:ms' aria-label='hh:mm:ss:ms' aria-describedby='config-start-time'\r\n            />\r\n            <Form.Control.Feedback type='invalid'>{errors.startTime && 'Start time should matcg hh:mm:ss format'}</Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Col>\r\n      </Row>\r\n      {isDirty && <div className='d-flex justify-content-end mt-2'>\r\n        <Button type='submit' disabled={!isValid}>Save</Button>\r\n      </div>}\r\n    </Card.Body>\r\n  </Form>\r\n}\r\nConfigBody.propTypes = {\r\n  configIndex: PropTypes.number.isRequired,\r\n  setConfigs: PropTypes.func.isRequired,\r\n  config: PropTypes.shape({\r\n    enable: PropTypes.bool.isRequired,\r\n    name: PropTypes.string,\r\n    url: PropTypes.string,\r\n    initWait: numberWithExponential,\r\n    startTime: PropTypes.string\r\n  }).isRequired\r\n}\r\nexport default ConfigBody\r\n","import React, { createRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './config.scss'\r\nimport Batch from '../batch'\r\nimport Action from '../action'\r\n\r\nimport { Card, Form, Row, Col, Dropdown } from 'react-bootstrap'\r\nimport { ReactComponent as ThreeDotsVertical } from 'bootstrap-icons/icons/three-dots-vertical.svg'\r\nimport { DropdownToggle } from '../../components/DropdownToggle'\r\nimport { ExportService, ImportService, ElementUtil } from '@dhruv-techapps/core-common'\r\nimport { LOCAL_STORAGE_KEY } from '@dhruv-techapps/acf-common'\r\nimport ConfigBody from './config-body'\r\nimport { numberWithExponential } from '../../util/prop-types'\r\nconst Config = ({ config, configIndex, toastRef, setConfigs }) => {\r\n  const importFiled = createRef()\r\n  const onChange = (e) => {\r\n    const { name, value } = ElementUtil.getNameValue(e.currentTarget)\r\n    setConfigs(configs => configs.map((config, index) => {\r\n      if (index === configIndex) {\r\n        return { ...configs[configIndex], [name]: value }\r\n      }\r\n      return config\r\n    }))\r\n  }\r\n\r\n  const exportConfig = () => {\r\n    ExportService.export(config.name || config.url || `configuration-${configIndex}`, config).catch(error => {\r\n      toastRef.current.push({\r\n        body: JSON.stringify(error),\r\n        header: <strong className='mr-auto'>Export Error</strong>,\r\n        bodyClass: 'text-danger'\r\n      })\r\n    })\r\n  }\r\n\r\n  const importConfig = (e) => {\r\n    var files = e.currentTarget.files\r\n    if (files.length <= 0) {\r\n      return false\r\n    }\r\n    var fr = new FileReader()\r\n    fr.onload = function (e) {\r\n      try {\r\n        const _config = JSON.parse(e.target.result)\r\n        const _name = _config.name || _config.url || 'configuration'\r\n        ImportService.import(_config, LOCAL_STORAGE_KEY.CONFIGS)\r\n        toastRef.current.push({\r\n          body: <p><span className=\"badge badge-success\">{_name}</span> imported successfully!</p>,\r\n          header: <strong className='mr-auto'>Configuration</strong>,\r\n          delay: 2000,\r\n          onClose: () => { window.location.reload() }\r\n        })\r\n      } catch (error) {\r\n        toastRef.current.push({\r\n          body: JSON.stringify(error),\r\n          header: <strong className='mr-auto'>Import Error</strong>,\r\n          bodyClass: 'text-danger'\r\n        })\r\n      }\r\n    }\r\n    fr.readAsText(files.item(0))\r\n  }\r\n\r\n  return <Card className='mb-3'>\r\n    <Card.Header as='h5'>\r\n      <Row>\r\n        <Col className='d-flex align-items-center'>\r\n          <a target='_blank' rel='noopener noreferrer' href='https://getautoclicker.com/docs/configuration'>Configuration</a>\r\n        </Col>\r\n        <Col md='auto' className='d-flex align-items-center'>\r\n          <Form.Check type='switch' name='enable' id='config-enable' label='Enable' checked={config.enable} onChange={onChange} />\r\n          <Dropdown className='ml-3' alignRight>\r\n            <Dropdown.Toggle as={DropdownToggle}>\r\n              <ThreeDotsVertical width='24' height='24' />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item href='#/action-1' onClick={exportConfig}>Export</Dropdown.Item>\r\n              <Dropdown.Item href='#/action-2' onClick={_ => importFiled.current.click()}>Import</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n          <div className=\"custom-file d-none\">\r\n            <input type=\"file\" className=\"custom-file-input\" ref={importFiled} accept=\".json\" id=\"import-configuration\" onChange={importConfig} />\r\n            <label className=\"custom-file-label\" htmlFor=\"import-configuration\" style={{ fontSize: 1 + 'rem', fontWeight: 400 }}>Import</label>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    {config.enable && <ConfigBody config={config} configIndex={configIndex} setConfigs={setConfigs} />}\r\n  </Card>\r\n}\r\n\r\nConfig.propTypes = {\r\n  configIndex: PropTypes.number.isRequired,\r\n  setConfigs: PropTypes.func.isRequired,\r\n  toastRef: Action.type.propTypes.toastRef,\r\n  config: PropTypes.shape({\r\n    enable: PropTypes.bool.isRequired,\r\n    name: PropTypes.string,\r\n    url: PropTypes.string,\r\n    initWait: numberWithExponential,\r\n    startTime: PropTypes.string,\r\n    batch: Batch.type.propTypes.batch,\r\n    actions: Action.type.propTypes.actions\r\n  }).isRequired\r\n}\r\nexport default React.memo(Config)\r\n","/* eslint no-void: 0 */\r\n\r\nexport const getConfigName = (url, index) => {\r\n  let name = `configuration-${index}`\r\n  if (url && url.match('://.*') !== null) {\r\n    name = url.split('/')[2]\r\n  } else if (url) {\r\n    name = url\r\n  }\r\n  return name\r\n}\r\n\r\nexport const disableContextMenu = () => {\r\n  window.$(document).keydown(function (e) {\r\n    return e.keyCode !== 123 && ((!e.ctrlKey || !e.shiftKey || e.keyCode !== 73) && void 0)\r\n  })\r\n  window.$(document).on('contextmenu', function (e) {\r\n    e.preventDefault()\r\n  })\r\n}\r\n","import React, { createRef, useEffect, useRef, useState } from 'react'\r\n\r\nimport Config from './config'\r\nimport Batch from './batch'\r\nimport Action from './action'\r\nimport AddonModal from './action/addon'\r\n\r\nimport { Row, Col, Button, Form, Dropdown, Alert, Card } from 'react-bootstrap'\r\nimport { ReactComponent as ThreeDotsVertical } from 'bootstrap-icons/icons/three-dots-vertical.svg'\r\n\r\nimport { defaultAction, defaultConfig, LOCAL_STORAGE_KEY } from '@dhruv-techapps/acf-common'\r\nimport { StorageService, ExportService, ElementUtil } from '@dhruv-techapps/core-common'\r\nimport { Loading } from '@dhruv-techapps/core-components'\r\n\r\nimport { DropdownToggle } from '../components/DropdownToggle'\r\nimport { getConfigName } from '../util/helper'\r\nimport ConfirmModal from '../components/ConfirmModal'\r\n\r\nconst Configs = ({ toastRef }) => {\r\n  const [configs, setConfigs] = useState([{ ...defaultConfig }])\r\n  const [selected, setSelected] = useState(0)\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState()\r\n  const config = configs[selected]\r\n  const didMountRef = useRef(true)\r\n  const addonRef = useRef()\r\n  const confirmRef = useRef()\r\n  const importFiled = createRef()\r\n\r\n  useEffect(() => {\r\n    StorageService.getItem(LOCAL_STORAGE_KEY.CONFIGS, [{ ...defaultConfig, name: '' }]).then(_configs => {\r\n      setSelected(checkQueryParams(_configs))\r\n      setConfigs(_configs)\r\n    }).catch(setError).finally(_ => setLoading(false))\r\n  }, [])\r\n\r\n  const checkQueryParams = (configs) => {\r\n    const object = {}\r\n    let selectedConfigIndex = 0\r\n    if (window.location.search) {\r\n      const params = window.location.search.replace('?', '').split('&')\r\n      for (const index in params) {\r\n        const [name, value] = params[index].split('=')\r\n        object[name] = decodeURIComponent(value)\r\n      }\r\n      if (object.url) {\r\n        selectedConfigIndex = configs.findIndex(config => config.url === object.url)\r\n        if (selectedConfigIndex === -1 && object.elementFinder) {\r\n          const config = { ...defaultConfig, name: 'getautoclicker.com' }\r\n          config.url = object.url\r\n          config.actions[0].elementFinder = object.elementFinder\r\n          configs.push(config)\r\n          selectedConfigIndex = configs.length - 1\r\n        } else if (object.error) {\r\n          const XPathIndex = configs[selectedConfigIndex].actions.findIndex(action => action.elementFinder === object.elementFinder)\r\n          if (XPathIndex !== -1) {\r\n            configs[selectedConfigIndex].actions[XPathIndex].error = 'elementFinder'\r\n          }\r\n        } else if (object.elementFinder) {\r\n          const XPathIndex = configs[selectedConfigIndex].actions.findIndex(action => action.elementFinder === object.elementFinder)\r\n          if (XPathIndex === -1) {\r\n            const action = { ...defaultAction }\r\n            action.elementFinder = object.elementFinder\r\n            configs[selectedConfigIndex].actions.push(action)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return selectedConfigIndex\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (didMountRef.current) {\r\n      didMountRef.current = false\r\n      return\r\n    }\r\n    StorageService.setItem(LOCAL_STORAGE_KEY.CONFIGS, configs).catch(setError).finally(_ => setLoading(false))\r\n  }, [configs])\r\n\r\n  const onChange = (e) => {\r\n    setSelected(ElementUtil.getValue(e.currentTarget))\r\n  }\r\n\r\n  const addConfig = () => {\r\n    const name = getConfigName(undefined, configs.length)\r\n    setConfigs([...configs, { ...defaultConfig, name }])\r\n    toastRef.current.push({\r\n      body: <p><span className='badge badge-success'>{name}</span> added successfully </p>,\r\n      header: <strong className='mr-auto'>Configuration</strong>\r\n    })\r\n  }\r\n\r\n  const removeConfig = () => {\r\n    const name = configs[selected].name\r\n    setLoading(true)\r\n    setConfigs(configs.filter((_config, index) => index !== selected))\r\n    setSelected(selected => configs.length === 2 ? 0 : selected === 0 ? selected : selected - 1)\r\n    setLoading(false)\r\n    toastRef.current.push({\r\n      body: <p><span className='badge badge-danger'>{name}</span> removed successfully</p>,\r\n      header: <strong className='mr-auto'>Configuration</strong>\r\n    })\r\n  }\r\n\r\n  const removeConfigConfirm = () => {\r\n    const name = configs[selected].name || configs[selected].url || `configuration-${selected}`\r\n    confirmRef.current.confirm({\r\n      title: 'Remove Configuration',\r\n      message: <p>Are you sure to remove <span className='badge badge-danger'>{name}</span> Configuration?</p>,\r\n      confirmFunc: removeConfig\r\n    })\r\n  }\r\n\r\n  const exportAll = () => {\r\n    ExportService.export('All Configurations', configs).catch(error => {\r\n      toastRef.current.push({\r\n        body: JSON.stringify(error),\r\n        header: <strong className='mr-auto'>Export Error</strong>,\r\n        bodyClass: 'text-danger'\r\n      })\r\n    })\r\n  }\r\n\r\n  const importAll = (e) => {\r\n    var files = e.currentTarget.files\r\n    if (files.length <= 0) {\r\n      return false\r\n    }\r\n    var fr = new FileReader()\r\n    fr.onload = function (e) {\r\n      try {\r\n        setLoading(true)\r\n        setConfigs(JSON.parse(e.target.result))\r\n        setSelected(0)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        toastRef.current.push({\r\n          body: JSON.stringify(error),\r\n          header: <strong className='mr-auto'>Import Error</strong>,\r\n          bodyClass: 'text-danger'\r\n        })\r\n      }\r\n    }\r\n    fr.readAsText(files.item(0))\r\n  }\r\n\r\n  return <>\r\n    {loading ? <Loading className='d-flex justify-content-center m-5' />\r\n      : error ? <Alert variant='danger'><Alert.Heading>Error</Alert.Heading>{JSON.stringify(error)}</Alert> : <>\r\n        <Card className='mb-3'>\r\n          <Card.Body>\r\n            <Row >\r\n              <Col>\r\n                <Form>\r\n                  <Form.Group controlId='selected' className='mb-0'>\r\n                    <Form.Control as='select' custom onChange={onChange} value={selected} data-type='number'>\r\n                      {configs.map((config, index) => <option key={index} value={index}>{config.name || getConfigName(config.url, index)}</option>)}\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                </Form>\r\n              </Col>\r\n              <Col md='auto' className='d-flex align-items-center'>\r\n                <Button type='button' variant='success' onClick={addConfig}>Add Configuration</Button>\r\n                <Dropdown className='ml-3' alignRight>\r\n                  <Dropdown.Toggle as={DropdownToggle} id='dropdown-basic'>\r\n                    <ThreeDotsVertical width='24' height='24' />\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={exportAll}>Export All</Dropdown.Item>\r\n                    <Dropdown.Item onClick={_ => importFiled.current.click()}>Import All</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.Item onClick={removeConfigConfirm} className={configs.length === 1 ? 'text-muted' : 'text-danger'} disabled={configs.length === 1}>Remove Configuration</Dropdown.Item>\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n                <div className=\"custom-file d-none\">\r\n                  <input type=\"file\" className=\"custom-file-input\" ref={importFiled} accept=\".json\" id=\"import-configurations\" onChange={importAll} />\r\n                  <label className=\"custom-file-label\" htmlFor=\"import-configurations\" style={{ fontSize: 1 + 'rem', fontWeight: 400 }}>Import All</label>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n        <Config config={config} configIndex={selected} toastRef={toastRef} setConfigs={setConfigs} />\r\n        <ConfirmModal ref={confirmRef} />\r\n        {config.enable && <>\r\n          <Batch batch={config.batch} configIndex={selected} setConfigs={setConfigs} />\r\n          <Action actions={config.actions} configIndex={selected} toastRef={toastRef} setConfigs={setConfigs} addonRef={addonRef} />\r\n          <AddonModal ref={addonRef} configIndex={selected} setConfigs={setConfigs} />\r\n        </>}\r\n      </>}\r\n  </>\r\n}\r\nConfigs.propTypes = {\r\n  toastRef: Action.type.propTypes.toastRef\r\n}\r\nexport default Configs\r\n","import React, { useState, forwardRef, useImperativeHandle } from 'react'\r\nimport './ToastHandler.scss'\r\nimport { Toast } from 'react-bootstrap'\r\n\r\nconst ToastHandler = forwardRef((props, ref) => {\r\n  const [list, setList] = useState([])\r\n\r\n  const close = (selected) => {\r\n    setList(list => list.map((toast, index) => {\r\n      if (index === selected) {\r\n        return { ...toast[selected], show: false }\r\n      }\r\n      return toast\r\n    }))\r\n  }\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    push (toast) {\r\n      setList([toast, ...list])\r\n    }\r\n  }))\r\n\r\n  return <div className='toast-handler'>\r\n    {list.map(({ body, header, bodyClass, headerClass, delay = 5000, autohide = true, show = true, onClose }, index) => {\r\n      return <Toast key={index} onClose={() => { close(index); onClose && onClose(index) }} show={show} delay={delay} autohide={autohide}>\r\n        <Toast.Header className={headerClass}>{header}</Toast.Header>\r\n        <Toast.Body className={bodyClass}>{body}</Toast.Body>\r\n      </Toast>\r\n    })}\r\n  </div>\r\n})\r\nToastHandler.displayName = 'ToastHandler'\r\nexport default ToastHandler\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Alert } from 'react-bootstrap'\r\n\r\nexport const Error = ({ error, className }) => {\r\n  return <Alert variant=\"danger\" className={className}>\r\n    <Alert.Heading>Error</Alert.Heading>\r\n    {JSON.stringify(error)}\r\n  </Alert>\r\n}\r\nError.propTypes = {\r\n  className: PropTypes.string,\r\n  error: PropTypes.any.isRequired\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GoogleAds = ({ client, slot, format }) => {\r\n  useEffect(() => {\r\n    if (process.env.NODE_ENV === 'production') {\r\n      (window.adsbygoogle = window.adsbygoogle || []).push({})\r\n    }\r\n  }, [])\r\n  if (process.env.NODE_ENV === 'production') {\r\n    return (\r\n      <ins\r\n        className='adsbygoogle'\r\n        style={{ display: 'block' }}\r\n        data-ad-client={client}\r\n        data-ad-slot={slot}\r\n        data-ad-format={format}\r\n        data-full-width-responsive='true'\r\n      />\r\n    )\r\n  }\r\n  return <></>\r\n}\r\nGoogleAds.propTypes = {\r\n  client: PropTypes.string.isRequired,\r\n  slot: PropTypes.string.isRequired,\r\n  format: PropTypes.string.isRequired\r\n}\r\nexport default GoogleAds\r\n","import React, { useEffect, useRef, useState } from 'react'\nimport './App.scss'\nimport Header from './app/header'\nimport Footer from './app/footer'\nimport Configs from './app/main/configs'\nimport ToastHandler from './app/components/ToastHandler'\nimport { Container } from 'react-bootstrap'\nimport { ManifestService } from '@dhruv-techapps/core-common'\nimport { Error } from './app/components/Error'\nimport GoogleAds from './app/components/GoogleAds'\n\nfunction App () {\n  const toastRef = useRef()\n  const [manifest, setManifest] = useState()\n  const [error, setError] = useState()\n\n  useEffect(() => {\n    ManifestService.values(['name', 'version']).then(setManifest).catch(error => {\n      setError(error)\n      if (error.message === 'Could not establish connection. Receiving end does not exist.') {\n        window.location.href = 'https://getautoclicker.com/'\n      }\n    })\n  }, [])\n\n  try {\n    return <Container>\n      {error ? <Error error={error} className=\"mt-5\"/> : manifest && <>\n        <Header name={manifest.name}/>\n        <main>\n          <Configs toastRef={toastRef} />\n        </main>\n        <Footer version={manifest.version} />\n        <ToastHandler ref={toastRef} />\n      </>}\n      <GoogleAds client=\"ca-pub-9512495707028343\" slot=\"4304175895\" format=\"auto\"/>\n    </Container>\n  } catch (error) {\n    console.error(',ers', error)\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { disableContextMenu } from './app/util/helper'\nimport { GAService } from '@dhruv-techapps/core-common'\n\nwindow.react_env = process.env\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nif (process.env.NODE_ENV !== 'development') {\n  disableContextMenu()\n}\nwindow.onerror = function (message) {\n  GAService.error({ name: 'OptionsPageError', stack: message })\n}\n\nconsole.error = (function () {\n  const { error } = console\n  return function (...args) {\n    GAService.error({ name: 'OptionsPageError', stack: args[0] })\n    error.apply(console, args)\n  }\n}())\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}